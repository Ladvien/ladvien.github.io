I"Ä<h1 id="creating-reusable-code">Creating Reusable Code</h1>

<p>Writing report code which can be reused is critical to being an effective report specialist.  By now, hopefully, you see the power of SQL-R, especially around HMIS data.  But you may still feel slow.  Or have thoughts like, ‚ÄúIf I pulled these data into Excel I could manually filter them in 1/10th the time.‚Äù That‚Äôs probably true.  But, after manually filtering dataset after dataset it becomes apparent finding a way to automate some tasks would save many hours in the long-run. Thus, writing an R scripts for routine work would save countless hours of monotony.</p>

<p>However, one problem remains, each task will usually have a <em>slight</em> variation from the one before it.  This causes you to write 95% of the same code with a slight tweak for the current project.  And that doesn‚Äôt save time at all.  In the programming world, the 95% code which is the same is known as <a href="https://en.wikipedia.org/wiki/Boilerplate_code">bolierplate code</a>.</p>

<p>Ok, that‚Äôs the problem.  The solution? Functions.</p>

<p>A function is nothing more than a section of code you save into a variable for easy reuse.</p>

<p>Defining a function looks like this:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">myNewFunction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(){</span><span class="w">
  </span><span class="c1"># Code you want to run goes here.</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Then, whenever you want to use this code it can be called like this:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">myNewFunction</span><span class="p">()</span></code></pre></figure>

<p>If you want to pass the function something to use:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">myNewFunction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">clientDf</span><span class="p">){</span><span class="w">
  </span><span class="n">clientDf</span><span class="o">$</span><span class="n">VeteranStatus</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">clientDf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">clientCsvPath</span><span class="p">)</span><span class="w">
</span><span class="n">myNewFunction</span><span class="p">(</span><span class="n">clientDf</span><span class="p">)</span></code></pre></figure>

<p>And the coolest thing about functions is being able to <code class="highlighter-rouge">return</code> data.  Functions return whatever data is on the last line of the function. This can be a tricky concept, but at its root it is simple.</p>

<p>Here, the <code class="highlighter-rouge">clientDf</code> will be returned.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">myNewFunction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">clientDf</span><span class="p">){</span><span class="w">
  </span><span class="n">clientDf</span><span class="o">$</span><span class="n">VeteranStatus</span><span class="p">[</span><span class="n">clientDf</span><span class="o">$</span><span class="n">VeteranStatus</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"1"</span><span class="p">]</span><span class="w">
  </span><span class="n">clientDf</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">clientDf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">clientCsvPath</span><span class="p">)</span><span class="w">
</span><span class="n">veteranList</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">myNewFunction</span><span class="p">(</span><span class="n">clientDf</span><span class="p">)</span></code></pre></figure>

<p>The result is then passed back out of the function, where it can be assigned to a new variable.</p>

<p>You may notice, this is similar to a lot of code we have been using. Like <code class="highlighter-rouge">read.csv</code>.  That‚Äôs because <code class="highlighter-rouge">read.csv</code> is a function written by the makers of R and included for our use.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">clientDf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">clientCsvPath</span><span class="p">)</span></code></pre></figure>

<p>This is how R has become powerful tool.  Many smart people have written sets of functions, which are called libraries.  Feel the power of open-source.</p>

<p>Time to give back to community and write some of our own functions</p>

<h2 id="data-needed">Data Needed</h2>

<p>For this work challenge you will need:</p>

<ol>
  <li>Client.csv</li>
  <li>Enrollment.csv</li>
  <li>Project.csv</li>
  <li>Exit.csv</li>
</ol>

<h2 id="the-goal">The Goal</h2>

<p>Write functions which will do the following:</p>

<ul>
  <li>Join <code class="highlighter-rouge">clientDf</code>, <code class="highlighter-rouge">enrollmentDf</code>, <code class="highlighter-rouge">projectDf</code>, <code class="highlighter-rouge">exitDf</code> and return the combined dataframe.</li>
  <li>Make the following columns readable:
    <ul>
      <li>Gender</li>
      <li>VeteranStatus</li>
      <li>DisablingCondition</li>
      <li>RelationshipToHoH</li>
      <li>ResidencePriorLengthOfStay</li>
      <li>LOSUnderThreshold</li>
      <li>PreviousStreetESSH</li>
      <li>TimesHomelessPastThreeYears</li>
      <li>MonthsHomelessPastThreeYears</li>
      <li>Destination</li>
    </ul>
  </li>
  <li>Get most recent HUD Assessment per PersonalID</li>
  <li>Filter to clients who are active in programs (except Night-by-Night and Street Outreach projects)</li>
  <li>Write a function to filter <code class="highlighter-rouge">enrollmentDf</code> based upon a user defined parameter.</li>
</ul>

<p><strong><em>BONUS</em></strong></p>
<ul>
  <li>Write a function which returns a list of Chronically Homeless individuals.</li>
</ul>

<p>For the last function, here‚Äôs an example,</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">clientsWithDisablingCondition</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">getSubpopulation</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="s2">"DisablingCondition"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Yes"</span><span class="p">)</span></code></pre></figure>

<p>The function you‚Äôd write would be <code class="highlighter-rouge">getSubpopulation()</code>.  The first parameter would be the dataframe the user is passing into your function. Second parameter is the column to look at.  The last is which response the user wants in the column to look in.</p>

<h2 id="the-resources">The Resources</h2>
<p>Below are the resources which should help for each step:</p>

<ul>
  <li>R Programming A-Z ‚Äì Video 21 ‚Äì Functions in R</li>
  <li><a href="https://www.r-bloggers.com/paste-paste0-and-sprintf/">paste()</a></li>
</ul>

:ET