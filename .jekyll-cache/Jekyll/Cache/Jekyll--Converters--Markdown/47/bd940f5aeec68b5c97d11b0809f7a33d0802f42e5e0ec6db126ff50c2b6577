I"≥H<p>Originally posted on <a href="www.letsmakerobots.com">www.letsmakerobots.com</a></p>

<p>I‚Äôve been working on this one in silence for a bit.</p>

<p>Awhile back it hit me, before I started growing my <a href="http://letsmakerobots.com/node/38208">Overlord project</a> in complexity I wanted to refine it for ease-of-use. Therefore, I began translating my Overlord project into a Python module I could build off.</p>

<p><a class="btn" href="https://github.com/Ladvien/Overlord" target="">A Friendly Overlord</a></p>

<p>I figure, this would make it easier for anyone to use. This includes myself, I‚Äôve not forgotten my identity as a hack, nor will anyone who pops the hood on this module :)</p>

<p>But, at its core, there are few essential inputs:</p>

<ol>
  <li>Color to track.</li>
  <li>Compass reading.</li>
</ol>

<p>So, I spent some time translating the code into a callable module.  This experiment was mainly for my own use, yet I knew it‚Äôd grow healthier if I had LMR‚Äôs feedback, elder or noob.</p>

<p>When I started <em>I actually planned</em> (gasp) out what would make this code more user friendly.  I didn‚Äôt think long; the two things that have taken the most time tweaking to get this code useful are:</p>

<ol>
  <li>Adjusting the compass heading.</li>
  <li>Selecting the color to track.</li>
</ol>

<p>To address the first issue, I developed a ‚Äúauto-compass calibration function.‚Äù</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">mapper</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">in_min</span><span class="p">,</span> <span class="n">in_max</span><span class="p">,</span> <span class="n">out_min</span><span class="p">,</span> <span class="n">out_max</span><span class="p">):</span>
    <span class="c1">#This will map numbers onto others.
</span>    <span class="k">return</span> <span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="n">in_min</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">out_max</span> <span class="o">-</span><span class="n">out_min</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">in_max</span> <span class="o">-</span> <span class="n">in_min</span><span class="p">)</span> <span class="o">+</span> <span class="n">out_min</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">compass</span><span class="p">(</span><span class="n">headingDegrees</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">compassInitFlag</span>
    <span class="k">global</span> <span class="n">initialRawHeading</span>
    <span class="k">global</span> <span class="n">intRx</span>

    <span class="c1">#This sets the first compass reading to our 0*.
</span>    <span class="k">if</span> <span class="n">compassInitFlag</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
       <span class="n">initialRawHeading</span> <span class="o">=</span> <span class="n">headingDegrees</span>
       <span class="n">compassInitFlag</span> <span class="o">=</span> <span class="bp">True</span>
       <span class="k">print</span> <span class="n">initialRawHeading</span>
       <span class="nb">exit</span>

    <span class="c1">#This is the function that actually maps offsets the compass reading.
</span>    <span class="k">global</span> <span class="n">intialRawHeading</span>
    <span class="k">if</span> <span class="n">headingDegrees</span> <span class="o">&gt;=</span> <span class="n">initialRawHeading</span><span class="p">:</span>
        <span class="n">adjHeading</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">(</span><span class="n">headingDegrees</span><span class="p">,</span> <span class="n">initialRawHeading</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="mi">360</span><span class="o">-</span><span class="n">initialRawHeading</span><span class="p">))</span>
    <span class="k">elif</span> <span class="n">headingDegrees</span> <span class="o">&lt;=</span> <span class="n">initialRawHeading</span><span class="p">:</span>
        <span class="n">adjHeading</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">(</span><span class="n">headingDegrees</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">initialRawHeading</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="mi">360</span><span class="o">-</span><span class="n">initialRawHeading</span><span class="p">),</span> <span class="mi">360</span><span class="p">)</span>

    <span class="c1">#Here, our compass reading is loaded into intRx
</span>    <span class="n">intRx</span> <span class="o">=</span> <span class="n">adjHeading</span></code></pre></figure>

<p>Basically, this function takes the very first compass reading and adjusts all other readings.  So, all you have to do is put your robot in the direction you want it to consider ‚ÄúNorth,‚Äù start your code, and this function will convert all other readings.</p>

<p><img src="../images/Friendly_Overlord_--_Color_Selector.jpg" alt="" /></p>

<p>The second issue took me a little longer to deal with: easy color selection.  In short, I rewrote most of the color detection parts of the code to take advantage of the OpenCV‚Äôs <a href="http://docs.opencv.org/trunk/doc/py_tutorials/py_video/py_meanshift/py_meanshift.html">CamShift</a> algorithm.  This function is more resilient to lighting changes or other near color objects, but it is also more CPU intensive.  At some point, I‚Äôll probably go back and write a variant that sticks with the old largest-target-color-mass method.</p>

<p>Ok, what this means for the user?  When the code starts you select the color you‚Äôd like by left-click and dragging a selection box over an area.  The mean color of the selected area will be tracked and this will also start the rest of the code.</p>

<p>What does Friendly Overlord give you?</p>

<p>Well, a lot.  And when I finish writing the damn thing, more than alot.</p>

<p>Here‚Äôs a list, and only one bit is untrue.</p>

<ol>
  <li>It tracks your robot, providing its x and y relative to your webcam.</li>
  <li>It will provide a target coordinates, which I‚Äôll later make addressable in case someone wants to do something cool, rather than have their robot drive around and catch virtual dots. Lame.</li>
  <li>It will take the compass reading you provide, translate it to a heading relative to the camera, then, it will send commands to your robot telling it to turn until it is in alignment, then move towards the target.</li>
  <li>Make you a cuppa (CP, DanM, did I use that right?)</li>
  <li>It will allow you to tweak pretty much any element of the code (e.g., overlord.targetProximity = 5)</li>
</ol>

<p>What does it <strong>not</strong> do?</p>

<ol>
  <li>Take care of your serial data.  You‚Äôre own your on, bud.</li>
  <li>Write your robot uC code for you.</li>
  <li>Provide you with your robot‚Äôs heading (though, when I delve into two-color detection this could be done with two-dots on your bot.  But really, it‚Äôd be easier and near cheaper to get an HMC5883L).</li>
</ol>

<p>Alright, so let‚Äôs talk code.  How little code does it take to use it?</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">serial</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">overlord</span>

<span class="c1">#Initialize Overlord variables.
</span><span class="n">overlord</span><span class="o">.</span><span class="n">dVariables</span><span class="p">()</span>

<span class="c1">#Open COM port to tether the bot.
</span><span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="o">.</span><span class="n">Serial</span><span class="p">(</span><span class="s">'COM34'</span><span class="p">,</span> <span class="mi">9600</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">OpenCV</span><span class="p">():</span>
    <span class="c1">#Execute the Overlord.
</span>    <span class="n">overlord</span><span class="o">.</span><span class="n">otracker</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">rx</span><span class="p">():</span>
    <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
        <span class="c1"># Read the newest output from the Arduino
</span>        <span class="k">if</span> <span class="n">ser</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
            <span class="n">rx</span> <span class="o">=</span> <span class="n">ser</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
            <span class="n">rx</span> <span class="o">=</span> <span class="n">rx</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span>
            <span class="n">rx</span> <span class="o">=</span> <span class="n">rx</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
            <span class="n">rx</span> <span class="o">=</span> <span class="n">rx</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"."</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
            <span class="c1">#Here, you pass Overlord your raw compass data.  
</span>            <span class="n">overlord</span><span class="o">.</span><span class="n">compass</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">rx</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">motorTimer</span><span class="p">():</span>
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
        <span class="c1">#This is for threading out the motor timer.  Allowing for control
</span>        <span class="c1">#over the motor burst duration.  There has to be both, something to write and
</span>        <span class="c1">#the motors can't be busy.
</span>        <span class="k">if</span> <span class="n">overlord</span><span class="o">.</span><span class="n">tranx_ready</span> <span class="o">==</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">overlord</span><span class="o">.</span><span class="n">motorBusy</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
            <span class="n">ser</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">overlord</span><span class="o">.</span><span class="n">tranx</span><span class="p">)</span>
            <span class="n">ser</span><span class="o">.</span><span class="n">flushOutput</span><span class="p">()</span> <span class="c1">#Clear the buffer?
</span>            <span class="n">overlord</span><span class="o">.</span><span class="n">motorBusy</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">overlord</span><span class="o">.</span><span class="n">tranx_ready</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">overlord</span><span class="o">.</span><span class="n">motorBusy</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">sleep</span><span class="p">(</span><span class="mf">.2</span><span class="p">)</span> <span class="c1">#Sets the motor burst duration.
</span>            <span class="n">ser</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">overlord</span><span class="o">.</span><span class="n">stop</span><span class="p">)</span>
            <span class="n">sleep</span><span class="p">(</span><span class="mf">.3</span><span class="p">)</span> <span class="c1">#Sets time inbetween motor bursts.
</span>            <span class="n">overlord</span><span class="o">.</span><span class="n">motorBusy</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c1">#Threads OpenCV stuff.
</span><span class="n">OpenCV</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">OpenCV</span><span class="p">)</span>
<span class="n">OpenCV</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

<span class="c1">#Threads the serial functions.
</span><span class="n">rx</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">rx</span><span class="p">)</span>
<span class="n">rx</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

<span class="c1">#Threads the motor functions.
</span><span class="n">motorTimer</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">motorTimer</span><span class="p">)</span>
<span class="n">motorTimer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This is fully functional code.  You‚Äôll notice that really, only about 10 lines get Friendly Overlord going, the rest handle Serial functions and motor firing.  Be warned, the motor firing code will change, since it is written how I like it right now, eventually will be designed to be as flexible as possible.</p>

<p>Walkthrough:</p>

<ol>
  <li>overlord.dVariables() #Sets the Friendly Overlord variables.</li>
  <li>overlord.otracker() # The module‚Äôs heart.  Handles color tracking, angle calculation, etc.</li>
  <li>overlord.compass(x) # You pass it an compass heading as an integer in degrees (0-360) and it does the rest.</li>
  <li>overlord.tranx_ready # Simple flag to indicate last bit of serial data has be sent.</li>
  <li><span style="line-height: 1.231;">overlord.tranx # Variable that contains the serial command to be sent to the robot.</span></li>
  <li><span style="line-height: 1.231;">overlord.motorBusy # Flag to indicate if the robot is still in the middle of a movement.</span></li>
</ol>

<p>That‚Äôs about it.  In the module? 399 lines of code, or so.  Still relatively small for a program but not something I want to wade through without a damned good reason.</p>

<p>Ok.  So, where am I going with this?</p>

<p>Hell if I know.  I want to make it as versatile as possible.  Eventually, I‚Äôd like to be tracking nth number of robots.  I envision a swarm of <a href="http://letsmakerobots.com/node/39306">Yahmez‚Äô Baby bots</a> flying all over the place, Friendly Overlord tracking them, and communicating with them via IR.</p>

<p>But in the more immediate future, I‚Äôd like to make every variable tweakable.  Especially, variables useful to others.  For instance, the overlord.tX and overlord.tY are currently controlled by the module.  They are simply randomized numbers.  But, I‚Äôll make a flag in the next two days to take control of them from your own code.  You can decide where you‚Äôd like your robot to go.  Whether it be to your mouse pointer (overlord.targetY = overlord.mouseY) or a complex set of way-points to lead him through a maze.  Really, I‚Äôll probably code around the feedback I get.</p>

<p>Now, some obligatory stuff.</p>

<p>Here are some of the current variables addressable from your program:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#How close to does the robot need to be? Greater is less accurate.
#Defaults to 5.
</span><span class="n">overlord</span><span class="o">.</span><span class="n">targetProximity</span> <span class="o">=</span> <span class="mi">5</span>

<span class="c1">#GUI X, Y
#Defaults to 0, 0
</span><span class="n">overlord</span><span class="o">.</span><span class="n">guiX</span> <span class="o">=</span> <span class="mi">440</span>
<span class="n">overlord</span><span class="o">.</span><span class="n">guiY</span> <span class="o">=</span> <span class="mi">320</span>

<span class="c1">#Random target constraint; so target doesn't get placed too far from center.
#Defaults to 1, 640, 1, 480
</span><span class="n">overlord</span><span class="o">.</span><span class="n">targetLeftLimit</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">overlord</span><span class="o">.</span><span class="n">targetRightLimit</span> <span class="o">=</span> <span class="mi">400</span>
<span class="n">overlord</span><span class="o">.</span><span class="n">targetBottomLimit</span> <span class="o">=</span> <span class="mi">320</span>
<span class="n">overlord</span><span class="o">.</span><span class="n">targetTopLimit</span> <span class="o">=</span> <span class="mi">20</span></code></pre></figure>

<p>But I‚Äôd like to make every variable needed by the user available.</p>

<p>Ok.  So, here‚Äôs what I need: <strong>Someone to use it and provide feedback.</strong>  I‚Äôm getting too close to it and bleary of thought.</p>

<p>I‚Äôve thought of doing a few things to get some feedback:</p>

<ol>
  <li>Setup a challenge (I‚Äôve got some surplus).</li>
  <li>Offer to mail one person a month a setup (two Bluetooth PCBs and a cheap webcam).</li>
</ol>

<p>Any suggestions?</p>

<p>I think I‚Äôll make a walkthrough video pretty soon (kinda miss making stupid videos) but I‚Äôm a little worn out right now.</p>
:ET