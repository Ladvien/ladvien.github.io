I"qí<p>Originally posted on <a href="www.letsmakerobots.com">www.letsmakerobots.com</a></p>

<p><strong>Videos:</strong></p>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/jiU4ZEwfStc" frameborder="0" allowfullscreen=""></iframe>
</div>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/WNtI78fFOlk" frameborder="0" allowfullscreen=""></iframe>
</div>

<p><strong>UPDATE: 1/05/13</strong></p>

<p>New angle.  I finished my <a href="http://letsmakerobots.com/node/39795">ATtiny Bitsy Spider</a> (<strong>ABS</strong>) board and wanted to do something with it.  While stringing it together I had thought of replacing the Arduino Pro Mini and the Servo Helper board with the ABS.  Costs wise, it will be slighty more expensive ($1.50 or so?) but <em>much</em> smaller and a lot less hassle.</p>

<p>I‚Äôve read several people had mixed results getting an ATtiny to control servos. Of course, I‚Äôm no better.  But I was able to get acceptable functionality out of them (i.e., controlling continuous rotation servo speed, direction, braking).  Anyway, here‚Äôs kinda how I approached the servos on the ATtiny 85.</p>

<p>I found several blogs about getting servos to work on the ATtiny but ultimately I used the <a href="http://www.cunningturtle.com/servo8bit-library-version-0-6-released/">Servo8Bit library</a> (note, for ease of use I‚Äôm linking the ‚ÄúArduino version‚Äù below, not AVR).</p>

<ul>
  <li><a href="http://www.cunningturtle.com/wordpress/wp-content/uploads/2011/11/servo8bit_arduino_example.zip">Servo8Bit Arduino Library and Example</a></li>
</ul>

<p><img src="../images/Jot_and_ABS.jpg" alt="" />It doesn‚Äôt seem real friendly, but in a hack‚Äôs opinion, it seems like great code that is incomplete‚Äìhope someone corrects if I‚Äôm off.  The problem I had, and I believe others, was the library using Timer1 for servo timing.  The Tiny cores (at least the ones I‚Äôm using) use Timer1 for basic functionality, creating a conflict.  This presented to me in the inability to use the delay() function.  It was simply as if it had not effect.  That‚Äôs when I popped the hood on the library itself.  In the <a href="https://github.com/fri000/Servo8Bit/blob/master/Servo8Bit.h">header</a> files there is an option for which timer to use.  So, I switched it from Timer1 to Timer0.  I tried the code again.  Great, delay() seemed to work now, <em>but</em> the ability to control the servos was gone.  As soon as the myServo.attach(3) was called the servo would spin in with full speed in one direction.  Damnit.</p>

<p>I didn‚Äôt feel like digging through the rest of the library trying to debug something I only half understood.  So, I began researching.  After a bit, I came upon <a href="http://forum.arduino.cc/index.php?topic=183185.0">this</a> thread. Seems this fellow WireJunky was trying to figure out how to do the same, control continuous rotation servos with an ATtiny.  At the end Nick Gammon told him he should just create his own timer function.</p>

<p>Anyway, I hacked this code out after reading the thread and was surprised it did what I want. <strong>I‚Äôm a hack hacking with a hacksaw!</strong></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">//Basic Jot movement using ATtiny Spider</span>

<span class="cp">#include "Servo8Bit.h"
</span><span class="kt">void</span> <span class="nf">mydelay</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">milliseconds</span><span class="p">);</span>  <span class="c1">//forward declaration to the delay function</span>

<span class="n">Servo8Bit</span> <span class="n">myServoA</span><span class="p">;</span>  <span class="c1">//create a servo object.</span>
<span class="n">Servo8Bit</span> <span class="n">myServoB</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">myServoA</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>  <span class="c1">//attach the servo to pin PB3</span>
  <span class="n">myServoB</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="n">mydelay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(){</span>

            <span class="n">myServoA</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">160</span><span class="p">);</span>             <span class="c1">// tell servo to go to position in variable 'pos'</span>
            <span class="n">myServoB</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>             <span class="c1">// tell servo to go to position in variable 'pos'</span>
            <span class="n">mydelay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>                      <span class="c1">// waits 15ms for the servo to reach the position</span>
            <span class="n">myServoA</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>             <span class="c1">// tell servo to go to position in variable 'pos'</span>
            <span class="n">myServoB</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>             <span class="c1">// tell servo to go to position in variable 'pos'</span>
            <span class="n">mydelay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>                      <span class="c1">// waits 15ms for the servo to reach the position</span>
            <span class="n">myServoA</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>             <span class="c1">// tell servo to go to position in variable 'pos'</span>
            <span class="n">myServoB</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">160</span><span class="p">);</span>             <span class="c1">// tell servo to go to position in variable 'pos'</span>
            <span class="n">mydelay</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>                      <span class="c1">// waits 15ms for the servo to reach the position</span>
    <span class="p">}</span>

<span class="kt">void</span> <span class="nf">mydelay</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">milliseconds</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">milliseconds</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span><span class="c1">//end delay</span></code></pre></figure>

<p>There are a few issues.  It seems my B servo has some jitter in it.  It doesn‚Äôt like to stop at myServoB.write(90).  I tried calling myServoB.detach(), then myServoB.attach(3) in a hackish attempt to stop the servo.  It‚Äôll stop but wont re-attach.</p>

<p>Anyway, even if troubleshooting it doesn‚Äôt work out I have some work arounds. For example, running the VCC for the servos through a P-Chan that is controlled by the ATtiny, it‚Äôd take an extra pin but would allow me to accurately control stopping them.  Though, I believe this lack of ‚Äúcenteredness‚Äù is due to either a cheap 0805 I used in the conversion or other noisy stuff I have on the PB4 pin.</p>

<p>Of course, to use the ABS as a replacement brain on the Jot, <strong>I‚Äôlll need to create a star-network with the ABS‚Äôes, write a library to control the HMC5883L from the ATtiny, make sure there are no other timing issues, and fit it all in 8k Flash.</strong>  Ugh.  Righ now the code size is around 3k with servo and serial library.</p>

<p><strong>UPDATE: 12/24/13</strong></p>

<p><img src="../images/Burnt_Cap.jpg" alt="" />Well, I don‚Äôt know what to say.  I think I‚Äôm going to take a break from this build for a bit and focus on finishing the Overlord projects with the Dot Muncher.</p>

<p>I discovered what was causing my problems with the NRF24L01.  It wasn‚Äôt the voltage-regulator.  It was the 1uF 0805s filtering the regulator.  I replaced the unknown capacitors (ones bought off of eBay) with some from Digi-Key that were rated 25v.  This fixed the problem and I had the Jot communicating nicely as I had hoped.</p>

<p>Of course, that wasn‚Äôt the end of the problems.  I discovered the HCM5883L board was shorting, I believe, everytime I programmed the board.  It‚Äôs pissing me off.  I‚Äôve burnt four compass boards and two Arduino Pro‚Äôs over the issue (smoked around $15 in parts).  It has something to do with the HCM53883L I2C lines feeding backward through the board whenever the Arduino goes low.  It causes the voltage-regulator on the HCM5883L board to pop almost right away.  Of course, it does slight damage to other parts of the connected boards.  I didn‚Äôt know it at the time, however, I believe this was the reason the filtering capacitors were damaged, the backward current.</p>

<p><img src="../images/IMG_0248.jpg" alt="" /></p>

<p><strong>Stuff Burnt on the Pyre of Stupidity ‚Äì&gt;</strong></p>

<p>That‚Äôs not the only issue.  The code I‚Äôve got together for the NRF24L01 doesn‚Äôt play nice with the HCM5338L library.</p>

<p>But I can‚Äôt tell how to re-write the code in a way they are happy with each while the f‚Äôin boards keep burning up.  Sigh.</p>

<p>Nevertheless, I think my next step, when I‚Äôve got my gusto back, will be to make a complete schematic of the Arduino Pro Mini, Little Helper Board, and the HCM5338L.  I figure the first two I have schematics for already, and I have enough HCM5883L boards to pull the components off and reverse engineer the PCB.</p>

<p>Still, I‚Äôm a little depressed.  I‚Äôm feel like I‚Äôd been better off making the boards myself.  At least then, I would know exactly how they are strung together and could only blame myself for issues.</p>

<p>I also feel like Frits needs to put together a ‚ÄúRobotics Fail of the Week‚Äù so I can be it‚Äôs first highlight.  Man, even looking at that picture now makes me feel like I suck at life.  Oh well, I‚Äôm going to list the good stuff I‚Äôve learned from this.</p>

<ol>
  <li>Reverse current is a bitch‚Äìlow-drop diodes are your friends.</li>
  <li>I have put together code that makes the NRF24L01 have closer to Bluetooth functionality.  Though, it doesn‚Äôt like being in the same code as the Wire library.</li>
  <li>Cheap parts are require you be time rich.</li>
  <li>NRF24L01 isn‚Äôt really meant for streaming data.  I knew this to begin, but I didn‚Äôt understand how it really plays out in the code.  The NRF takes a lot of code management.  Unlike other devices that are hardware managed or SoC.  This makes the NRF highly sensitive to what else your code is doing.  In my case, running servos, communicating over I2C, and doing floating point math.  As I progress in this build, I feel I‚Äôm taxing the NRF‚Äôs functionality beyond its ability.</li>
  <li>It is better to learn the circuits of all boards connected to yours.  It might initially take more time, but in the end save time <em>and</em> money.</li>
  <li>If I fail it something, although looking ridiculous is not fun, documenting the failure makes me feel better.  Like it meant something.  Even if that something is, ‚ÄúHey world, I‚Äôm an idiot.‚Äù :)</li>
</ol>

<p><strong>UPDATE: A Jot of Trouble</strong></p>

<p>I didn‚Äôt want to float this post until I have something working to update, but I missed writing for a change. I‚Äôve been working on the little Jot frequently over the last few months.  Yet, I keep running into problems.  The NRF24L01s are acting silly.  One day they work, another they don‚Äôt.  I guess we can‚Äôt make woman jokes now that <a href="http://letsmakerobots.com/node/38827">Roxanna77</a> is here? (If you read this Roxanna, just wanted you to know I had to make sure my wife didn‚Äôt read this post, it‚Äôd been hell in my house).</p>

<p><img src="../images/Little_Warmie_Board_Compass_Highlight.jpg" alt="" /></p>

<p>I have reworked the servo board (v.9.5) to include a double <a href="http://www.ebay.com/itm/261099178357?ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649">90-degree heade</a>r.  One set is to attach the servos, the other is to attach the <strong><a href="http://www.ebay.com/itm/NEW-HMC5883L-Power-supply-3V-5V-Triple-Axis-Compass-Magnetometer-Sensor-Module-/370878407287?pt=LH_DefaultDomain_0&amp;hash=item565a136277">Compass (HMC5883L)</a>.</strong> This was meant to make the hardware more compact, modular, and keep the compass level for a better reading.  Oh yah, and I burnt a few HMC5883Ls trying to connect them with crappy braided wires.</p>

<p>Also, I‚Äôve added solder-jumpers to tie the 3.3 SOT-23-5 voltage regulator‚Äôs enable pin to either high or low, depending which one I mistakenly buy.</p>

<p>On the top side I‚Äôve included an SMD voltage divder running straight into analog pin A3.  My intention is to allow the Jot to keep an eye on its battery voltage as a way of sensing how ‚Äúhungry‚Äù it is.</p>

<p>I‚Äôve added a 3.3v pin on the new double 90-header, in case I‚Äôve a 3.3v sensor elsewhere on the bot.  I dunno, I was trying to use all the extra pins I had.</p>

<p>Of course, since I‚Äôve learned how to tent vias, I‚Äôve also tented the vias on the board with hope I‚Äôll save myself a fateful short or two.</p>

<p><img src="../images/IMG_0241.jpg" alt="" /></p>

<p>I‚Äôll eventually try to replace those bulky headers with what I‚Äôve affectionaly begun to refer to as ‚Äú<a href="http://www.ebay.com/itm/170881393882?ru=http%3A%2F%2Fwww.ebay.com%2Fsch%2Fi.html%3F_sacat%3D0%26_from%3DR40%26_nkw%3D170881393882%26_rdc%3D1">Those short, round headers</a>.‚Äù  I like these little headers because of how utterly small they are.  Of course, they are small but the bulk of their body does not make it through thicker PCBs.  This is due to the point flaring closer to where the plastic header is.  This flare prevents the short-rounds from sinking through the typical header hole on most boards.</p>

<p>But, I‚Äôve got calipers, Eagle CAD, and OSHPark, so I made a little library of header holes that will allow these pins to slip neatly through the board and mate with short-rounds on the other side.  I sent off to OSHPark for a sample, so I‚Äôll report back when I‚Äôve tested them for effect.</p>

<p><img src="../images/IMG_0247.jpg" alt="" />Now, for what has kept me from moving forward with this little damn bot: <a href="http://www.digikey.com/product-detail/en/AAT3221IGV-3.3-T1/863-1491-1-ND/4240225">A cheap voltage regulator</a>.</p>

<p>On my original version of the servo board (by the way, I refer to it as the Little Warmie Helper board or LWH board) I had used a <a href="http://www.digikey.com/product-detail/en/TLV70033DDCT/296-25276-1-ND/2176454">different voltage regulator</a> that cost more.  The only difference I found between these were the output, the first I used putting out 200mA and the second 150mA.  I really didn‚Äôt think this made a difference, given what I could find in the datasheet.  I know there are passives effecting the power consumption, but it‚Äôs the only info I could find (<a href="http://www.nordicsemi.com/eng/content/download/2726/34069/file/nRF24L01P_Product_Specification_1_0.pdf">datasheet</a>, pg. 8) The NRF24L01 was using around 11.3mA for the transmitter and 13.5mA for receiver.  Even though I didn‚Äôt know the power-consumption of the passives I believed I was well within the range to use the cheap 150mA voltage regulator.  But, experience has proven otherwise.</p>

<p>This is where I ask the professionals to come in and tease me about missing something simple.</p>

<p>The only theory I could invent, given my limited understanding of electronics, is the NRF24L01 only used 11.3/13.5mA in an amp hour, but the burst use exceeds the constant 150mA of the cheap regulator?  I don‚Äôt know.  I‚Äôm at a loss.</p>

<p>Of course, this is pure speculation.  I‚Äôm currently out of higher output voltage regulators (I should have some more by the end of the week).  But, I can leave the NRF24L01 in place on my LWH board and solder on jumpers to the 3.3v and GND pins and get the NRF24L01 to function properly.  This makes me believe the fault lies directly with the inadequacies of the voltage-regulator and not my board design (though, it‚Äôs inadequacies I‚Äôm sure are glaring).</p>

<p>Anyways, this is where I am with the little Jot.</p>

<p>A couple of notes. I have a backup design of the Jot that I‚Äôm working to get cheaper than $25, which uses BLE (yes, those <a href="http://letsmakerobots.com/node/38009">HM-10</a>s I‚Äôm in a love-affair). Also, I decided if I was to get serious about the <a href="http://letsmakerobots.com/node/38208">Overlord</a> projects I‚Äôd probably do better turning it into a Python module, which I‚Äôve been doing in silence and is around 90% done.  I‚Äôll try to have it up before the end of the year.  I need to finish several functions.</p>

<p><strong>UPDATE: Progress on NRF24L01 code for working between PC, Hub, and Robot.</strong></p>

<p>So, here is my attempt at a swarmie build.  Not much here yet, simply a personal build log until I get an iteration cheap enough, then, I‚Äôll start incorporating them into the <a href="http://letsmakerobots.com/node/38208">Overlord</a> projects.</p>

<p>I have to bow to <a href="http://www.bajdi.com/tag/nrf24l01/">Bajdi</a>; those little NRF24L01 take <strong>a lot</strong> more brainpower than simple ole‚Äô Bluetooth.  I tried for some time to write my own code that would send <strong>and</strong> receive bytes to or from the other node.  After a little of hair pulling I gave up and started reading other‚Äôs code.  I came across <a href="http://forum.arduino.cc//index.php?PHPSESSID=1uva8aiedtimb3i765lf01j907&amp;action=profile;u=115717">Robvio</a> on the <a href="http://forum.arduino.cc/index.php?topic=132496.0">Arduino Forums</a> who had some rather nifty code that I left nearly intact.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;SPI.h&gt;
#include "nRF24L01.h"
#include "RF24.h"
</span>
<span class="n">RF24</span> <span class="nf">radio</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
<span class="c1">// Radio pipe addresses for the 2 nodes to communicate.</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">pipes</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0xF0F0F0F0E1LL</span><span class="p">,</span> <span class="mh">0xF0F0F0F0D2LL</span> <span class="p">};</span>

<span class="c1">//for Serial input</span>
<span class="n">String</span> <span class="n">inputString</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>         <span class="c1">// a string to hold incoming data</span>
<span class="n">boolean</span> <span class="n">stringComplete</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>  <span class="c1">// whether the string is complete</span>

<span class="c1">//NRF Packages</span>
<span class="n">byte</span> <span class="n">SendPackage</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
<span class="n">byte</span> <span class="n">ReceivePackage</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
<span class="n">boolean</span> <span class="n">sending</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">//</span>
  <span class="c1">// Print preamble</span>
  <span class="c1">//</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
  <span class="c1">// optionally, increase the delay between retries &amp; # of retries</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">setRetries</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">setPayloadSize</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">openWritingPipe</span><span class="p">(</span><span class="n">pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">openReadingPipe</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">startListening</span><span class="p">();</span>
  <span class="c1">//radio.printDetails();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">//check for NRF received</span>
  <span class="n">NRFreceive</span><span class="p">();</span>
  <span class="c1">//check for Serial received (or filled by NRF)</span>
  <span class="n">Serialreceive</span><span class="p">();</span>  
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">serialEvent</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Event"</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">inChar</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
    <span class="n">inputString</span> <span class="o">+=</span> <span class="n">inChar</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">inChar</span> <span class="o">==</span> <span class="sc">'\n'</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">stringComplete</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">byte</span> <span class="nf">NRFsend</span><span class="p">(</span><span class="n">String</span> <span class="n">NRFPack</span> <span class="o">=</span> <span class="s">""</span><span class="p">){</span>
  <span class="n">NRFPack</span><span class="p">.</span><span class="n">getBytes</span><span class="p">(</span><span class="n">SendPackage</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">stopListening</span><span class="p">();</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">openWritingPipe</span><span class="p">(</span><span class="n">pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">openReadingPipe</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="n">bool</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">radio</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">SendPackage</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">SendPackage</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">)</span> <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"NRFerror"</span><span class="p">);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">startListening</span><span class="p">();</span>
  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">started_waiting_at</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
  <span class="n">bool</span> <span class="n">timeout</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span> <span class="o">!</span> <span class="n">radio</span><span class="p">.</span><span class="n">available</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="n">timeout</span> <span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">millis</span><span class="p">()</span> <span class="o">-</span> <span class="n">started_waiting_at</span> <span class="o">&gt;</span> <span class="mi">200</span> <span class="p">)</span>
      <span class="n">timeout</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">timeout</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"NRFerror"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">openWritingPipe</span><span class="p">(</span><span class="n">pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="n">radio</span><span class="p">.</span><span class="n">openReadingPipe</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">NRFreceive</span><span class="p">(){</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">radio</span><span class="p">.</span><span class="n">available</span><span class="p">()</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">//byte ReceivePackage[32];</span>
    <span class="n">bool</span> <span class="n">done</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">done</span> <span class="o">=</span> <span class="n">radio</span><span class="p">.</span><span class="n">read</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ReceivePackage</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ReceivePackage</span><span class="p">)</span> <span class="p">);</span>
      <span class="n">delay</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">radio</span><span class="p">.</span><span class="n">stopListening</span><span class="p">();</span>
    <span class="n">inputString</span> <span class="o">=</span> <span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">ReceivePackage</span><span class="p">);</span>
    <span class="n">stringComplete</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">radio</span><span class="p">.</span><span class="n">write</span><span class="p">(</span> <span class="s">"1"</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
    <span class="n">radio</span><span class="p">.</span><span class="n">startListening</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Serialreceive</span><span class="p">(){</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">stringComplete</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">inputString</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">"T:"</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">NRFsend</span><span class="p">(</span><span class="n">inputString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">inputString</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">"S:"</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">inputString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">inputString</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="n">stringComplete</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The way this code works is much like a software and serial simulated Bluetooth module.</p>

<p>To send serial data it goes like this, you type something with a prefix code, T for transmit and S for serial print, and ending with a newline character (\n).</p>

<p>For example, typing the following in the terminal on <strong>module A</strong>:</p>

<ul>
  <li><strong>T:S: My message \n</strong></li>
</ul>

<p>Will send ‚ÄúMy message‚Äù to the other <strong>module B</strong>, then, it will print ‚ÄúMy Message‚Äù to serial line on the <strong>module B</strong>.</p>

<p>If you type,</p>

<ul>
  <li><strong>T: My message \n</strong></li>
</ul>

<p>This will transmit ‚ÄúMy message‚Äù from <strong>module A</strong> to <strong>module B</strong>, but it will not be printed to the serial line on <strong>module B.</strong></p>

<p>I‚Äôll let you guys look the code over and tell me if I can improve it for what I‚Äôm doing.  Right now, I‚Äôve tested it with some basic Python code to send a serial message to my <strong>hub</strong> (Arduino Uno and NRF24L01), which relays it to the <strong>robot</strong> (Arduino Pro Mini and NRF24L01).</p>

<p><img src="../images/Jot_NRF_2.jpg" alt="" /></p>

<p><a href="https://tinkercad.com/things/l7IGEve8m4n-jot-i8/">Public Tinkercad Design</a></p>

<p><a href="https://tinkercad.com/things/l7IGEve8m4n-jot-i8/"><img src="https://tinkercad.com/things/l7IGEve8m4n/t725.png?t=52670c7d" alt="" /></a></p>

<p>Cost to build</p>

<ol>
  <li><strong><a href="http://www.fasttech.com/products/0/10002348/1170304-mystery-9g-mini-servo">Tower Micro 9g Servo x 2</a>: $5.22</strong></li>
  <li><strong><a href="http://www.pololu.com/catalog/product/953">Ball Caster 1/2‚Äù Metal x 1</a>: $3.65</strong></li>
  <li><strong><a href="http://www.fasttech.com/products/0/10004915/1380906-pro-mini-microcontroller-circuit-board-module-for-">Funduino (early Arduino Pro Mini):</a> $4.89</strong></li>
  <li><strong><a href="http://www.ebay.com/itm/4x-AAA-1800mAh-1-2V-Ni-MH-Rechargeable-battery-3A-Yellow-Cell-for-MP3-RC-Toys-/160692223026?pt=US_Rechargeable_Batteries&amp;hash=item256a00bc32">AAA x 4:</a> $1.44</strong></li>
  <li><strong><a href="http://www.fasttech.com/products/1005/10002877/1215201-nrf24l01-enhanced-24ghz-wireless-transceiver-modul">NRF24L01 x 1:</a> $1.31</strong></li>
  <li><strong><a href="http://www.ebay.com/itm/NEW-HMC5883L-Power-supply-3V-5V-Triple-Axis-Compass-Magnetometer-Sensor-Module-/370878407287?pt=LH_DefaultDomain_0&amp;hash=item565a136277">Compass (HMC5883L)</a>: $2.37</strong></li>
  <li><strong><a href="http://www.mcmaster.com/#catalog/119/3140/=oj5hz0">2-56 Threaded 2‚Äù Stud x 2:</a> $1.00</strong></li>
  <li><strong><a href="http://www.ebay.com/itm/170642767090?ssPageName=STRK:MEWAX:IT&amp;_trksid=p3984.m1423.l2649">2-56 1 1/2‚Äù Screw x 2: $.17</a></strong></li>
  <li><strong><a href="http://www.mcmaster.com/#catalog/119/3159/=oj5ies">2-56 Hex Nut x 6: $.23</a></strong></li>
  <li><strong><a href="http://www.ebay.com/itm/310617655649?ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649">AAA x Battery Case w/ Switch:</a> 1.05</strong></li>
  <li><strong>Helper Board:$1.53</strong></li>
  <li><a href="http://www.digikey.com/scripts/DKSearch/dksus.dll?Detail&amp;itemSeq=136537538&amp;uq=635149121422549357">SOT-23-5, 3.3v, .30mA LDO Voltage Regulator x 1:</a> $.57</li>
  <li><a href="http://www.digikey.com/product-detail/en/CL21F105ZOCNNNC/1276-1246-1-ND/3889332">1uF 0805 ceramic capacitor x 2:</a> $.20</li>
  <li><a href="http://www.digikey.com/product-detail/en/RMCF0805JT4K70/RMCF0805JT4K70CT-ND/1942570">0805 4.7k resistor x 2:</a> $.03</li>
  <li><a href="http://www.digikey.com/product-detail/en/RMCF0805JT330R/RMCF0805JT330RCT-ND/1942547">0805 330-860oh resistor x 1:</a> $.03 <span style="line-height: 1.231; white-space: pre;"></span></li>
  <li>0603 LED (<a href="http://www.digikey.com/product-detail/en/LS%20Q971-KN-1/475-3016-1-ND/3837594">red</a>, <a href="http://www.digikey.com/product-detail/en/LG%20Q971-KN-1/475-1409-1-ND/1802597">green</a>, <a href="http://www.digikey.com/product-detail/en/LY%20Q976-P1S2-36/475-2558-1-ND/1802685">yellow</a>) x 1: $.09</li>
  <li><a href="http://www.ebay.com/itm/310673046300?ssPageName=STRK:MEWNX:IT&amp;_trksid=p3984.m1439.l2649">Right Angle header x 8</a>: $.05</li>
  <li><a href="http://www.ebay.com/itm/10x-40Pin-2-54-Single-Row-Pin-Male-Header-Strip-for-Arduino-Prototype-Shield-DIY-/400344863620?pt=LH_DefaultDomain_0&amp;hash=item5d3669d384">Straight Header x 26: $.08</a></li>
</ol>

<p><strong>Total (approximate): $23.95</strong></p>

<p><img src="../images/IMG_9160.jpg" alt="" /></p>

<p><img src="../images/IMG_9159.jpg" alt="" /></p>

<p><img src="../images/IMG_9144.jpg" alt="" /></p>

<p><img src="../images/IMG_9147.jpg" alt="" /></p>

<p><img src="../images/IMG_9156.jpg" alt="" /></p>

<p>Videos</p>

<p><strong>Designing the build in Tinkercad:</strong></p>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/2Ygoz4O6GsY?list=UUKodYd0Fj3TSHzXg7aOJYYQ" frameborder="0" allowfullscreen=""></iframe>
</div>

<p><strong>Converting Tower Pro 9g Servo to Full Rotation for Motors:</strong></p>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/sG3Cx3PJiyY?list=UUKodYd0Fj3TSHzXg7aOJYYQ" frameborder="0" allowfullscreen=""></iframe>
</div>

<p><strong>Cutting Out the Build:</strong></p>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/lDOTqbaHIfU?list=UUKodYd0Fj3TSHzXg7aOJYYQ" frameborder="0" allowfullscreen=""></iframe>
</div>

<p><strong>Putting the Pieces Together:</strong></p>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/c0AYFFcty_I?list=UUKodYd0Fj3TSHzXg7aOJYYQ" frameborder="0" allowfullscreen=""></iframe>
</div>

<p><strong>Making the Little Warmie Helper:</strong></p>

<div class="flex-video">
<iframe width="560" height="315" src="https://www.youtube.com/embed/XVDfMpXEbPg?list=UUKodYd0Fj3TSHzXg7aOJYYQ" frameborder="0" allowfullscreen=""></iframe>
</div>
:ET