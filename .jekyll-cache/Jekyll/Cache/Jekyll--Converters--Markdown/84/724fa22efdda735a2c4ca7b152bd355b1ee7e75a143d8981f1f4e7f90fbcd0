I"à<p>R letâ€™s us work with HMIS data, but there is still the problem of how to load the data into R from a source.  R is actually pretty neat regarding data importing.  We can load data from a website, SQL database, text file, Excel file, or CSV.</p>

<p>When working with HMIS data the two most common types of data source are Excel and CSV.  Therefore, itâ€™s going to pay to spend a little time on how to bring those files into R.</p>

<h2 id="importing-csvs-into-r">Importing CSVs into R</h2>
<p>CSV stand for Comma Separated Value format.  It is a near ancient file format which is used to store data in rows and columns.  If you have a CSV file on the computer (in Windows) right-click on it and open it in Notepad.  The contents should look something like this:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">PersonalID,FirstName,LastName
B7YIOJIGF9CDP6FV7TANQXLMQRMBTVTB,Bob,Person
ASGJ4F95HS85N39DJ12AJB094M59DJ45,Jane,People</code></pre></figure>

<p>However, if you open the same CSV in Excel it will look something like this:</p>

<table>
  <thead>
    <tr>
      <th>PersonalID</th>
      <th>FirstName</th>
      <th>LastName</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>B7YIOJIGF9CDP6FV7TANQXLMQRMBTVTB</td>
      <td>Bob</td>
      <td>Person</td>
    </tr>
    <tr>
      <td>ASGJ4F95HS85N39DJ12AJB094M59DJ45</td>
      <td>Jane</td>
      <td>People</td>
    </tr>
  </tbody>
</table>

<p>Letâ€™s be honest, the second example is easier for humans to read (well, unless youâ€™re an odd human).  And for the most part, we will be looking at CSVs in Excel or in RStudioâ€™s dataview which looks similar to Excel.  <strong>However</strong>, it is important to note the easier to read version can hide data errors that may only be visible by viewing the raw CSV.  Nothing to worry about now, but keep it in mind.</p>

<p>Alright, letâ€™s explore how to load a CSV file into R.  There is many wayâ€™s to do this, but letâ€™s start with a super-easy way:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">pathToCsv</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">file.choose</span><span class="p">()</span><span class="w">
</span><span class="n">myCsvAsADataFrame</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">pathToCsv</span><span class="p">)</span><span class="w">
 </span></code></pre></figure>

<p>These two commands, when executed, will force R to create a file selection box. This will allow us to easily select the CSV to load into R.  Once selected and we press<code class="highlighter-rouge">Ok</code> then R will load the selected fileâ€™s path into the variable <code class="highlighter-rouge">pathToCsv</code>.</p>

<p>The next command <code class="highlighter-rouge">read.csv()</code> takes the path provided and attempts to load the file it points to and converts it into a dataframe.  Once R creates a dataframe from the file selected it saves it in the variable <code class="highlighter-rouge">myCsvAsADataFrame</code></p>

<p>And thatâ€™s it.  The data is now loaded into R and it can be manipulated with other commands.</p>

<h2 id="writing-csvs">Writing CSVs</h2>
<p>Saving data from R is the other end of importing data.  This process is often referred to as exporting data.  Really, itâ€™s simply taking a R dataframe and converting it into a fileâ€“once in a file form it can be loaded into Excel or emailed to a peer (but, please donâ€™t email personal informationâ€“remember, CSVs are simply text).</p>

<p>To write data a CSV use <code class="highlighter-rouge">write.csv()</code>.</p>

<p>For example:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">write.csv</span><span class="p">(</span><span class="n">theDataFrameToWrite</span><span class="p">,</span><span class="w"> </span><span class="s2">"NameOfFile.csv"</span><span class="p">)</span></code></pre></figure>

<p>Thatâ€™s it, pretty simple, eh?  Well, there are a couple of catches.  When R saves a CSV it does a few things which are annoying for using the data in other way.  For example, letâ€™s say we have data in R that looks like this:</p>

<table>
  <thead>
    <tr>
      <th>PersonalID</th>
      <th>Name</th>
      <th>SSN</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>123JJKLDFWE234234JGD0238D2342346</td>
      <td>Â </td>
      <td>123-45-6589</td>
    </tr>
    <tr>
      <td>B7YIOJIGF9CDP6FV7TANQXLMQRMBTVTB</td>
      <td>Bob Purdy</td>
      <td>Â </td>
    </tr>
    <tr>
      <td>DSK329GJB9234J5JFSDF94056NDUNVDF</td>
      <td>Frank</td>
      <td>123-99-9999</td>
    </tr>
  </tbody>
</table>

<p>However, after it is written to a file it will look like this:</p>

<table>
  <thead>
    <tr>
      <th>PersonalID</th>
      <th>Name</th>
      <th>SSN</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>123JJKLDFWE234234JGD0238D2342346</td>
      <td><strong>NA</strong></td>
      <td>123-45-6589</td>
    </tr>
    <tr>
      <td>B7YIOJIGF9CDP6FV7TANQXLMQRMBTVTB</td>
      <td>Bob Purdy</td>
      <td><strong>NA</strong></td>
    </tr>
    <tr>
      <td>DSK329GJB9234J5JFSDF94056NDUNVDF</td>
      <td>Frank</td>
      <td>123-99-9999</td>
    </tr>
  </tbody>
</table>

<p>Note the added <code class="highlighter-rouge">NA</code>.  It is a good practice to put an NA in places where there are no data.  Unfortunately, when dealing with HMIS data sets the standard is to leave a blank instead.  To get R to conform to this standard we use an option in the <code class="highlighter-rouge">write.csv()</code> function.</p>

<p>For example:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">write.csv</span><span class="p">(</span><span class="n">theDataFrameToWrite</span><span class="p">,</span><span class="w"> </span><span class="s2">"NameOfFile.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">na</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span></code></pre></figure>

<p>The <code class="highlighter-rouge">na=""</code> tells R to write the document without changing blanks into <code class="highlighter-rouge">NA</code>.  The result of the code above should look like:</p>

<table>
  <thead>
    <tr>
      <th>PersonalID</th>
      <th>Name</th>
      <th>SSN</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>123JJKLDFWE234234JGD0238D2342346</td>
      <td>Â </td>
      <td>123-45-6589</td>
    </tr>
    <tr>
      <td>B7YIOJIGF9CDP6FV7TANQXLMQRMBTVTB</td>
      <td>Bob Purdy</td>
      <td>Â </td>
    </tr>
    <tr>
      <td>DSK329GJB9234J5JFSDF94056NDUNVDF</td>
      <td>Frank</td>
      <td>123-99-9999</td>
    </tr>
  </tbody>
</table>
:ET