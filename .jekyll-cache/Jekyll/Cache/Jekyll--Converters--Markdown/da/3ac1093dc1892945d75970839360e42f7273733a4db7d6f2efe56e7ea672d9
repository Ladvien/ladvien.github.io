I"‡
<p>Originally posted on <a href="www.letsmakerobots.com">www.letsmakerobots.com</a></p>

<p>Part of my C journal ‚Äì Writing an LPC1114 bootloader</p>

<p><strong><img src="../images/GCCLogo.png" alt="" /><span style="font-size: large;">Setting Up the GCC Compiler</span></strong></p>

<p>I setup a C environment as basic I could.  <span style="line-height: 1.231;">There may be easier ways to go about this, but I wanted to use GCC to compile.  </span></p>

<p>To setup the environment:</p>

<p>1. I downloaded and setup <a href="http://www.mingw.org/wiki/HOWTO_Install_the_MinGW_GCC_Compiler_Suite">MinGW32</a>.</p>

<p>2. I then downloaded <a href="http://www.ftdichip.com/Drivers/D2XX.htm">FTD2XX libraries</a>.  <strong>This included the ftd2xx.h file and ftd2xx.lib</strong>.</p>

<p>3. I then stole the test code from Hack-a-Day‚Äôs article on <a href="http://hackaday.com/2009/09/22/introduction-to-ftdi-bitbang-mode/">bitbanging with the FTDI</a>.</p>

<p>4. I modified the code as they suggested by including, in this order, the Windows compatibility files:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;
#include &lt;windef.h&gt;
#include &lt;winnt.h&gt;
#include &lt;winbase.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
#include "ftd2xx.h"
#include &lt;sys/time.h&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I used this line to build it:</p>

<p><strong>$ gcc -o main main.c -L./ -lftd2xx</strong></p>

<p>You must have both the ftd2xx.h and ftd2xx.lib in the same directory as you attempt to build.</p>

<p>As for editing, I‚Äôve really grown to love <a href="http://www.sublimetext.com/2">Sublime Text 2</a>.</p>

<p>If you have issues**, make sure directory containing your files is in your PATH environment variable **(I go over how to add the directory to your environment variables in this <a href="http://letsmakerobots.com/content/lpc1114-setup-bare-metal-arm">post</a>).</p>

<p><strong><span style="font-size: large;">D2XX ‚Äì FTDI Support</span></strong></p>

<p>The FTDI chips are highly <a href="https://www.sparkfun.com/news/1629">controversial</a> chips in the embedded world.  I will not begin the debate on their efficacy.  I chose this particular serializer since I felt most roboticist would have at least one, making software released using the chips reach a greater range of people on the spectrum of hobbyist to professional.</p>

<p>Also, the supporting tools went well with one of the design goals for this project: Simplicity.  I wanted to keep the code as near to machine code as I could easily write.  Bdk6 described C to me as, ‚ÄúA high-level assembly language.‚Äù</p>

<p><img src="../images/Screenshot_2015-03-04_00_01_56.png" alt="" /></p>

<p>There are two basic interfaces for the FTDI chips</p>

<ol>
  <li>Virtual COM port.</li>
  <li>FTD2XX.DLL</li>
</ol>

<p>I will be using the DLL.  This is what the ‚Äú**-L./ -lftd2xx‚Äù **<span style="line-height: 1.231;">part of our compile command is referring.  It is including the ftd2xx library found in working directory.</span></p>

<p><span style="line-height: 1.231;">The D2XX library is pretty nifty.  It provides a collections of C++ functions to interact with the FTDI chip, and thereby, anything speaking UART.</span></p>

<p><span style="line-height: 1.231;">A full list of the commands and C code examples may be found in the,</span></p>

<ul>
  <li><a href="http://www.ftdichip.com/Support/Documents/ProgramGuides/D2XX_Programmer's_Guide(FT_000071).pdf">D2XX Programmers Guide</a></li>
</ul>

<p>One last caveat regarding the reason I selected using the D2XX libraries instead of using the chip as a virtual COM port.  I wanted as much control over the metal of the chip is possible.  Originally, I had set out to write a downloader that‚Äôd use the <a href="http://letsmakerobots.com/lpc1114-usb-serial-solution-rerolling-boot-uploader">already existing Sparkfun FTDI breakout</a>, meant to program the Arduino Pro Mini and LilyPad, as no-need-to-modify programmer for my LPC1114 board.  To accomplish this, I needed bit level control over all of the pins of the FTDI chip, <strong>which the D2XX has, but the COM port does not.</strong>  Therefore, it was the deciding factor for using the D2XX library.  <strong>Plus, I didn‚Äôt know the difference when I started, so that whole explanation was baloney</strong>.  But, even if I realized it post-fact, it was the reason I didn‚Äôt switch to COM port.</p>

<p><img src="../images/FTDI_main_menu.png" alt="" /></p>

<p><strong>Setup Menu</strong></p>

<p>I found the easiest way to work with the D2XX is to setup a menu.</p>

<ul>
  <li><a href="http://letsmakerobots.com/content/command-line-menu">Command Line Menu</a></li>
</ul>

<p><strong>YOUR_CODE.C</strong></p>

<p><span style="line-height: 16.0030002593994px;">I‚Äôm writing this article as if someone were importing my FTDI_HELPER module to use in their code.  A few important notes: First, the variables we will use are actually declared in YOUR_CODE.C.  They are global variables.  We then redeclare them as <strong>extern</strong> variables in the FTDI_HELPER.H.  This tells the compiler it‚Äôs going to be using several global variables, but they were actually declared in the YOUR_CODE.C.  This allows the FTDI_HELPER module to setup the FTDI device, but your code will be able to act on all the major variables, such as the RxBuffer, ftHandle, etc.</span></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="n">YOUR_CODE</span><span class="p">.</span><span class="n">C</span>

<span class="n">FT_DEVICE_LIST_INFO_NODE</span> <span class="o">*</span><span class="n">devInfo</span><span class="p">;</span>
<span class="n">bool</span> <span class="n">FTDI_open_flag</span><span class="p">;</span>


<span class="kt">uint8_t</span> <span class="n">RawRxBuffer</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>


<span class="n">FT_STATUS</span> <span class="n">ftSvtatus</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">EventDWord</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">TxBytes</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">BytesWritten</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">RxBytes</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">BytesReceived</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li><span style="line-height: 1.231;">3: A pointer variable which will store all the connected device information.</span></li>
  <li><span style="line-height: 1.231;">4: A flag set whenever we actually connect to an FTDI device.  This allows your program to detect the connection.</span></li>
  <li><span style="line-height: 1.231;">7: An RX buffer.  It will fill automatically when we receive data. You may adjust the size if needed; I think the FTDI chip only sends 20 bytes at time, but I was lazy.</span></li>
  <li><span style="line-height: 1.231;">10: Variable to store boolean flag for whether an D2XX command was successful.</span></li>
  <li>12: Used to store bytes to be sent.</li>
  <li>13: BytesWritten is used to store how many bytes were actually written by the FT_Write command.</li>
  <li>14: RxBytes stores how many bytes are waiting to be read.</li>
  <li>15: BytesReceived is used by FT_Read to store how many bytes have been read out of the RX buffer.</li>
</ul>

<p><strong>FTDI_HELPER.H</strong></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">H</span>

<span class="cp">#ifndef FTDI_HELPER
#define FTDI_HELPER
</span>
<span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;
#include &lt;windef.h&gt;
#include &lt;winnt.h&gt;
#include &lt;winbase.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
#include "ftd2xx.h"
#include &lt;sys/time.h&gt;
</span>
<span class="k">extern</span> <span class="kt">uint8_t</span> <span class="n">ParsedRxBuffer</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
<span class="k">extern</span> <span class="kt">uint8_t</span> <span class="n">RawRxBuffer</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>

<span class="k">extern</span> <span class="n">FT_HANDLE</span> <span class="n">handle</span><span class="p">;</span>
<span class="k">extern</span> <span class="n">FT_Status</span> <span class="n">ftStatus</span><span class="p">;</span>
<span class="k">extern</span> <span class="n">DWORD</span> <span class="n">EventDWord</span><span class="p">;</span>
<span class="k">extern</span> <span class="n">DWORD</span> <span class="n">TxBytes</span><span class="p">;</span>
<span class="k">extern</span> <span class="n">DWORD</span> <span class="n">BytesWritten</span><span class="p">;</span>
<span class="k">extern</span> <span class="n">DWORD</span> <span class="n">RxBytes</span><span class="p">;</span>
<span class="k">extern</span> <span class="n">DWORD</span> <span class="n">BytesReceived</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">connected_device_num</span><span class="p">;</span>

<span class="c1">// Lists FTDI commands.</span>
<span class="kt">void</span> <span class="nf">ftdi_menu</span><span class="p">();</span>

<span class="kt">void</span> <span class="nf">quick_connect</span><span class="p">();</span>

<span class="c1">// Lists FTDI devices connected.</span>
<span class="n">bool</span> <span class="nf">get_device_list</span><span class="p">();</span>
<span class="n">bool</span> <span class="nf">connect_device</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">);</span>
<span class="n">bool</span> <span class="nf">close_device</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">);</span>
<span class="n">bool</span> <span class="nf">reset_device</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">);</span>
<span class="n">bool</span> <span class="nf">set_baud_rate</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">);</span>
<span class="n">bool</span> <span class="nf">set_baud_rate_auto</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">);</span>

<span class="cp">#endif </span><span class="cm">/* FTDI_helper.h */</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><span style="line-height: 1.231;">Again, the extern variables are to let the compiler know we will be using the variables of the same name found in YOUR_CODE.C.</span></p>

<p><strong>Main Menu</strong></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="kt">void</span> <span class="nf">ftdi_menu</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">baud_rate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kt">char</span> <span class="n">char_choice</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">int_choice</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="n">bool</span> <span class="n">got_list</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="n">bool</span> <span class="n">connected_flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="n">bool</span> <span class="n">close_device_flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="n">bool</span> <span class="n">set_baud_flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

	<span class="c1">// FTDI Menu</span>
	<span class="k">do</span>
	<span class="p">{</span>
		<span class="n">system</span><span class="p">(</span><span class="s">"cls"</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"FTDI Menu: "</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">connected_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"       Connected: %lu, N, 1     </span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span> <span class="n">baud_rate</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"       Not Connected:               </span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"1. Quick Connect</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"2. Device List</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">got_list</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="c1">// Only display option if devices list.</span>
		<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"3. Connect Device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">connected_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="c1">// Only give display if connected.</span>
		<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"4. Close Device</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">connected_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="c1">// Only give display if connected.</span>
		<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"5. Change baud-rate</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">printf</span><span class="p">(</span><span class="s">"9. Main Menu</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

		<span class="c1">// If connected, display the connected device info.</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">connected_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"Connected Device: %d:</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">connected_device_num</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	Flags:         0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">Flags</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	Type:          0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">Type</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	ID:            0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ID</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	Local ID:      0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">LocId</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	Serial Number: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">SerialNumber</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	Description:   %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">Description</span><span class="p">);</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">" 	ftHandle =     0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="c1">// Get user choice.</span>
		<span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">char_choice</span><span class="p">);</span>

		<span class="c1">// Convert string to int for switch statement.</span>
		<span class="n">int_choice</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">char_choice</span><span class="p">);</span>

		<span class="k">switch</span> <span class="p">(</span><span class="n">int_choice</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
				<span class="n">quick_connect</span><span class="p">();</span>
				<span class="n">baud_rate</span> <span class="o">=</span> <span class="mi">115200</span><span class="p">;</span>
				<span class="n">connected_flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
				<span class="n">got_list</span> <span class="o">=</span> <span class="n">get_device_list</span><span class="p">();</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">got_list</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="c1">// Only display option if devices listed.</span>
				<span class="p">{</span>
					<span class="n">connected_flag</span> <span class="o">=</span> <span class="n">connect_device</span><span class="p">(</span><span class="o">&amp;</span><span class="n">baud_rate</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">4</span><span class="p">:</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">connected_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="c1">// Only give display if connected.</span>
				<span class="p">{</span>
					<span class="n">close_device_flag</span> <span class="o">=</span> <span class="n">close_device</span><span class="p">();</span>
					<span class="k">if</span><span class="p">(</span><span class="n">close_device_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">){</span><span class="n">connected_flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;}</span>
					<span class="n">close_device_flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
			    <span class="p">}</span>
			    <span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">5</span><span class="p">:</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">connected_flag</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="c1">// Only give display if connected.</span>
				<span class="p">{</span>
					<span class="n">set_baud_flag</span> <span class="o">=</span> <span class="n">set_baud_rate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">baud_rate</span><span class="p">);</span>
					<span class="c1">// set_baud_flag is not used, yet.</span>

<span class="p">}</span>
			    <span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">9</span><span class="p">:</span>
				<span class="n">main_menu</span><span class="p">();</span>
			    <span class="k">break</span><span class="p">;</span>
			<span class="nl">default:</span><span class="n">printf</span><span class="p">(</span><span class="s">"""Bad choice. Hot glue!"""</span><span class="p">);</span>
			    <span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">int_choice</span> <span class="o">!=</span><span class="mi">99</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I found the easiest way to setup a FTDI device in C is using a menu.  I‚Äôve provided five options: (1) Quick Connect, (2) Device List, (3) Connect Device, (4) Close Device, (5) and Set Baud Rate.  Several options require running the other options first.  For example, before ‚ÄúConnect Device‚Äù is displayed you must run ‚ÄúDevice List.‚Äù  Let‚Äôs walk through the code,</p>

<ul>
  <li>5-7: Variables for the scanf and switch-statement deriving the menu.</li>
  <li>9-12: Boolean flags for controlling the flow of the menu.</li>
  <li>15: We want a menu which is persistent, therefore, we use the do-while loop.</li>
  <li>19-22: Let‚Äôs display the connection information, but only if we have a device connected.</li>
  <li>27-42: We print the rest of the menu.  Some items only print if boolean flags are set to true.</li>
  <li>44-56: Prints out the device details, if connected.</li>
  <li>58-64: Gets a users input, converts it to an int, store it, then selects a switch-case based upon input.</li>
  <li>67: The quick_connect() function creates an FTDI connection based upon default attributes.</li>
  <li>68: Sets the local baud_rate variable to the quick_connect() baud rate.</li>
  <li>71: We get run the get_list() function, which lists all FTDI devices currently connected to the USB ports.</li>
  <li>74: We check to see if get_list() has already been run, before we allow the user to connect to a device.</li>
  <li>76: Connect_device() takes a pointer to the holding the value of the baud-rate the user has selected.  It then attempts to connect to the device.  If successful, the function returns true.</li>
  <li>80: Only allow a device to be closed, if one is connected.</li>
  <li>82: Close_device() attempts to shut-down the currently connected FTDI device.  If it is successful, it returns true.</li>
  <li>83-84: If the close_device() function was a success, the connected_flag is set to false, to show there is no device connected.  Then, the close_device flag is reset to false to prepare for the next close_device() call.</li>
  <li>90: The set_baud() takes a pointer to a value for the desired baud rate.  The function attempts to set the baud rate and returns true if successful.</li>
</ul>

<p>Quick Connect</p>

<p>This function is meant for the lazy user.  He or she does not want to select the device, or the baud rate, they‚Äôll simply take whatever your program gives you.  In my case, I wrote my quick connect to open device ‚Äò0‚Äô and set the baud rate to 115,200.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="kt">void</span> <span class="nf">quick_connect</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">115200</span><span class="p">;</span>
	<span class="c1">// Create the device information list</span>
	<span class="n">ftStatus</span> <span class="o">=</span> <span class="n">FT_CreateDeviceInfoList</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numDevs</span><span class="p">);</span>
	<span class="c1">// get the device information list</span>
	<span class="n">ftStatus</span> <span class="o">=</span> <span class="n">FT_GetDeviceInfoList</span><span class="p">(</span><span class="n">devInfo</span><span class="p">,</span><span class="o">&amp;</span><span class="n">numDevs</span><span class="p">);</span>
	<span class="c1">// Open user's selection.</span>
	<span class="c1">// Allocate storage for list based on numDevs.</span>
	<span class="n">devInfo</span> <span class="o">=</span>
	<span class="p">(</span><span class="n">FT_DEVICE_LIST_INFO_NODE</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">FT_DEVICE_LIST_INFO_NODE</span><span class="p">)</span><span class="o">*</span><span class="n">numDevs</span><span class="p">);</span>
	<span class="n">FT_Open</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">devInfo</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">);</span>
	<span class="n">FT_SetBaudRate</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="n">local_baud_rate</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>5: Place the baud rate into a variable to be set.</li>
  <li>7: We create a list of devices, placing them in our global InfoList variable.</li>
  <li>9: We get the device info on the created device list.</li>
  <li>12-13: We allocate enough space for info on each device enumerated.</li>
  <li>14: Opens the device at ‚Äò0‚Äô in the device list.</li>
  <li>15: Sets the baud rate to 115,200.</li>
</ul>

<p>Device List</p>

<p>The get_device_list() function is for the more cautious user.  First, a list of FTDI devices is generated.  After, enough space is allocated in an array for each device‚Äôs info.  Lastly, the device details gathered are placed in this list.  If the process of generating and storing the device details was successful the function returns true.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">get_device_list</span><span class="p">()</span>
<span class="p">{</span>
	<span class="c1">// Create the device information list.</span>
	<span class="n">ftStatus</span> <span class="o">=</span> <span class="n">FT_CreateDeviceInfoList</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numDevs</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">ftStatus</span> <span class="o">==</span> <span class="n">FT_OK</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Number of devices is %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">numDevs</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Failed to get FTDI device list.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">numDevs</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

		<span class="c1">// Allocate storage for list based on numDevs.</span>
		<span class="n">devInfo</span> <span class="o">=</span>
		<span class="p">(</span><span class="n">FT_DEVICE_LIST_INFO_NODE</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">FT_DEVICE_LIST_INFO_NODE</span><span class="p">)</span><span class="o">*</span><span class="n">numDevs</span><span class="p">);</span>

		<span class="c1">// Get the device information list.</span>
		<span class="n">ftStatus</span> <span class="o">=</span> <span class="n">FT_GetDeviceInfoList</span><span class="p">(</span><span class="n">devInfo</span><span class="p">,</span><span class="o">&amp;</span><span class="n">numDevs</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">ftStatus</span> <span class="o">==</span> <span class="n">FT_OK</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">printf</span><span class="p">(</span><span class="s">"Got Devices</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="k">else</span>
			<span class="p">{</span>
				<span class="n">printf</span><span class="p">(</span><span class="s">"Failed to get device list.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
				<span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="c1">// Set flag if we got at least on device.</span>
			<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>6: Creates a device list.</li>
  <li>8-13: If the attempt to create a device list fails, we tell the user.  Otherwise, we list the number of FTDI devices currently connected.</li>
  <li>15: If at least one device was detected, we proceed with listing the devices.</li>
  <li>18-19: We allocate enough memory space to store the device info of each connected device.</li>
  <li>22: We read each device, get the info, and put the info in the list respectively.</li>
  <li>23-30: If we got the device info, we tell the user, ‚ÄúWe got devices.‚Äù  Otherwise, we tell the user we failed.  Failed, failed, failed!</li>
  <li>32: Since we gathered some device info, the function returns true.</li>
  <li>34: If no device info was gathered, the function returns false.</li>
</ul>

<p>Connect Device from List</p>

<p>Once the get_device_list() function is run, then we are free to connect to one of the listed devices.  The connect_device() function takes a pointer to the desired baud-rate value for the connection.  This function requires the user enter a number 0-8, which is correlated to the devices gathered from the get_device_list() function.  The connect_device() function then connects to the respective FTDI device at the baud-rate passed to it.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">connect_device</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">)</span>
<span class="p">{</span>

	<span class="kt">char</span> <span class="n">char_choice</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">int_choice</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="n">bool</span> <span class="n">connected_flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

	<span class="n">system</span><span class="p">(</span><span class="s">"cls"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"Which device # (0-8)?</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"9. Return</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Connected FTDI:"</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numDevs</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Device: %d:</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	Flags:         0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Flags</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	Type:          0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Type</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	ID:            0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ID</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	Local ID:      0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">LocId</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	Serial Number: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">SerialNumber</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	Description:   %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Description</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">" 	ftHandle =     0x%02X</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">devInfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">char_choice</span><span class="p">);</span>
	<span class="n">int_choice</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">char_choice</span><span class="p">);</span>

	<span class="c1">// Limit list to 9 devices.  Really, who has more connected at once?</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">int_choice</span> <span class="o">==</span> <span class="mi">9</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">int_choice</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">int_choice</span> <span class="o">&lt;</span> <span class="mi">9</span> <span class="o">&amp;&amp;</span> <span class="n">int_choice</span> <span class="o">&lt;=</span> <span class="n">numDevs</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">// Open user's selection.</span>
		<span class="n">FT_Open</span><span class="p">(</span><span class="n">int_choice</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">devInfo</span><span class="p">[</span><span class="n">int_choice</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">);</span>

		<span class="c1">// Set default baud rate.</span>
		<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">115200</span><span class="p">;</span>

		<span class="n">FT_SetBaudRate</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="o">*</span><span class="n">local_baud_rate</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">FT_status</span> <span class="o">!=</span> <span class="n">FT_OK</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"Could not open FTDI device #%i.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">int_choice</span><span class="p">);</span>
			<span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">connected_device_num</span> <span class="o">=</span> <span class="n">int_choice</span><span class="p">;</span>
			<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>6-28: User and device information displayed.  Then, the user input is requested.  The user must enter 0-8 for the selection to be valid.</li>
  <li>31: If the user selects option ‚Äò9‚Äô, we return false, since no device was connected.</li>
  <li>35: Else if the user selects a 0-8 then the function will attempt to the respective device in the list we generated in earlier functions.</li>
  <li>38: Here we actually open the device corresponding to the user‚Äôs selection.</li>
  <li>41: We load the default baud-rate into the baud-rate variable.</li>
  <li>43: We set the baud-rate to 115,200.  This is the default speed.</li>
</ul>

<p>Close Device</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">close_device</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">FT_Close</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">FT_status</span> <span class="o">!=</span> <span class="n">FT_OK</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Could not close FTDI device.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><span style="line-height: 1.231;">Reset Device</span></p>

<p><span style="line-height: 1.231;">The reset function is pretty straightfoward.  It simply resets the connected FTDI device.  The baud-rate apparently has to be set again after reset.</span></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">reset_device</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">FT_ResetPort</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">);</span>
	<span class="n">Sleep</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
	<span class="n">FT_SetBaudRate</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="o">*</span><span class="n">local_baud_rate</span><span class="p">);</span>
	<span class="n">Sleep</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">FT_status</span> <span class="o">!=</span> <span class="n">FT_OK</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Could not reset FTDI device.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="c1">// Device reset a success.</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// Just in case.</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>5: Connected FTDI device is reset.</li>
  <li>7: The baud-rate is reapplied.</li>
</ul>

<p>Set Baud</p>

<p>The set_baud() funciton sets the connected device to whatever value the user selects.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">set_baud_rate</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">)</span>
<span class="p">{</span>

	<span class="kt">char</span> <span class="n">char_choice</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">int_choice</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="n">system</span><span class="p">(</span><span class="s">"cls"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"Set baud: </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"1. 9600</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"2. 19200</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"3. 38400</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"4. 57600</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"5. 115200</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"6. 230400</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"9. Exit</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

	<span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">char_choice</span><span class="p">);</span>
	<span class="n">int_choice</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">char_choice</span><span class="p">);</span>

	<span class="k">switch</span> <span class="p">(</span><span class="n">int_choice</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
			<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">9600</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
			<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">19200</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
			<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">38400</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">4</span><span class="p">:</span>
			<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">57600</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">5</span><span class="p">:</span>
			<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">115200</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">6</span><span class="p">:</span>
			<span class="o">*</span><span class="n">local_baud_rate</span> <span class="o">=</span> <span class="mi">230400</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="mi">9</span><span class="p">:</span>
			<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="nl">default:</span><span class="n">printf</span><span class="p">(</span><span class="s">"""Bad choice. Hot glue!"""</span><span class="p">);</span>
		    <span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">FT_SetBaudRate</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="o">*</span><span class="n">local_baud_rate</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">FT_OK</span> <span class="o">!=</span> <span class="n">FT_OK</span><span class="p">)</span>
	 <span class="p">{</span>
	 	<span class="n">printf</span><span class="p">(</span><span class="s">"Unable to change baud-rate</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	 	<span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
	 	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	 <span class="p">}</span>
	 <span class="k">else</span>
	 <span class="p">{</span>
	 	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	 <span class="p">}</span>
	 <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>6-47: The menu.  Each selection corresponds a predefined baud-rate value.</li>
  <li>49: The connected device‚Äôs baud-rate is changed to the user‚Äôs selected value.</li>
  <li>58: If the baud-rate was changed successfully, the funciton returns true.  Otherwise, it returns false.</li>
</ul>

<p>Auto Set Baud Rate</p>

<p>The set_baud_rate_auto() is meant to be used to programmatically change the baud-rate, rather than have the use define the baud-rate.  The command call is the same.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">set_baud_rate_auto</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">local_baud_rate</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">FT_SetBaudRate</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="o">*</span><span class="n">local_baud_rate</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">FT_OK</span> <span class="o">!=</span> <span class="n">FT_OK</span><span class="p">)</span>
	 <span class="p">{</span>
	 	<span class="n">printf</span><span class="p">(</span><span class="s">"Unable to change baud-rate</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	 	<span class="n">Sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
	 	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	 <span class="p">}</span>
	 <span class="k">else</span>
	 <span class="p">{</span>
	 	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	 <span class="p">}</span>
	 <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong><span style="font-weight: normal;">We are finally passed the setup functions, we get to the functions we are really interested.  This is the rx().  It is called when you want to get user from the RX buffer.  There are two buffers, by the way.  There is the buffer on the FTDI, which holds 20 characters (I believe).  But then, there is the buffer on your PC, which is largely limited to the amount of memory you computer has.</span></strong></p>

<p><strong>RX Function</strong></p>

<p>The We are finally passed the setup functions! Now, for the functions we are really interested in.  This is the rx().  It is called when you want to user from the RX buffer.  There are two RX buffers, by the way.  There is the buffer on the FTDI, which holds 20 characters (I believe).</p>

<p>But, then there is the buffer on your PC, which is largely limited to the amount of memory your computer has.  And remember, this is C.  If you set your PC‚Äôs RxBuffer to be limited to 256 characters and you get character 257, it‚Äôs not going to complain.  Rather, you will simply have a buffer overrun and hell trying to debug it.</p>

<p>Once the D2XX function FT_Read has been called, the PC buffer is cleared.  Therefore, getting the data you want comes down to calling rx() at the appropriate time.</p>

<p>Most of our variables declared to support this module are used in the rx() and tx() functions.</p>

<ol>
  <li><strong>RxBytes</strong> holds how many bytes are waiting to be read.</li>
  <li><strong>RawRXBuffer</strong> is the actual computer RX buffer.  Again, we set this buffer for 2048 characters, but if you receive character number 2049 it will not complain.  You will simply have a buffer overrun.  Cue sinister music.</li>
  <li><strong>BytesReceived</strong> is how many bytes have been received to be read.</li>
</ol>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">rx</span><span class="p">(</span><span class="n">bool</span> <span class="n">print_or_not</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// We need to get the status to see if we have characters in buffer.</span>
	<span class="n">FT_GetStatus</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">RxBytes</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">TxBytes</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">EventDWord</span><span class="p">);</span>
	<span class="c1">// We turn the buffer into a string; this is for easy parsing.</span>
	<span class="n">RawRxBuffer</span><span class="p">[</span><span class="n">RxBytes</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
	<span class="c1">// We only want to read the FTDI if there are bytes to read.</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">RxBytes</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// Read the bytes.  They are stored in the RawRxBuffer, BytesReceived is how many bytes we got</span>
		<span class="c1">// instead of how many bytes we should get.</span>
		<span class="n">FT_status</span> <span class="o">=</span> <span class="n">FT_Read</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span><span class="n">RawRxBuffer</span><span class="p">,</span><span class="n">RxBytes</span><span class="p">,</span><span class="o">&amp;</span><span class="n">BytesReceived</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">FT_status</span> <span class="o">==</span> <span class="n">FT_OK</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="n">print_or_not</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">RawRxBuffer</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="c1">// Put code here to copy string out of function.</span>
			<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"RX FAILED </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
			<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>3: The rx() function has a print to screen option.  Meaning, if we get data and call the rx() function by passing it a true, then it will print the data received to the screen.</li>
  <li>6: We get the status of the devices.  This will tell us how many bytes are waiting to be read (RxBytes).</li>
  <li>8: At is a simple way to convert our received data into a string, for easy parsing.</li>
  <li>10: If we actually got some bytes, lets do something with them.</li>
  <li>13: Actually loads the received data into our **RawRxBuffer.  **It also gets how many bytes have been read since the last FT_GetStatus call.</li>
  <li>15: If we got some bytes and we wanted to print, well, then let‚Äôs print them.</li>
  <li>19: <strong>This is an important spot</strong>.  Here is where you want to put code to copy the data from the RawRxBuffer, to a more permanent home.</li>
  <li>20: If we got some data, then return true.</li>
  <li>27: If we didn‚Äôt get any data, return false.</li>
</ul>

<p>You‚Äôd call the rx() function like so,</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">rx</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This would print out whatever data is in the rx buffer to the screen.</p>

<p><strong>TX Function</strong></p>

<p>We saved the best function for last: tx().</p>

<p>This function takes two primary variables.  A pointer to a character array and an integer indicating how many characters are found in the data array.  Also, it wants a boolean value representing whether you want the function to echo the data sent to the screen.</p>

<p>In the heart of a function is a loop, which writes a character at a time to the FTDI device.  The loop continues until the count is equal to the integer past to the function indicating how many characters are found in the array.  Then, if all characters have been written, then it returns true.  Otherwise, it returns false.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="n">FTDI_HELPER</span><span class="p">.</span><span class="n">C</span>

<span class="n">bool</span> <span class="nf">tx</span><span class="p">(</span><span class="kt">char</span> <span class="n">data</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">tx_data_size</span><span class="p">,</span> <span class="n">bool</span> <span class="n">print_or_not</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">uint8_t</span> <span class="n">FTWrite_Check</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">char_tx_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">while</span><span class="p">(</span><span class="n">char_tx_count</span> <span class="o">!=</span> <span class="n">tx_data_size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">//This should print just data (ie, no Start Code, Byte Count, Address, Record type, or Checksum).</span>
		<span class="n">FTWrite_Check</span> <span class="o">=</span> <span class="n">FT_Write</span><span class="p">(</span><span class="n">devInfo</span><span class="p">[</span><span class="n">connected_device_num</span><span class="p">].</span><span class="n">ftHandle</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="n">char_tx_count</span><span class="p">],</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">char_tx_count</span><span class="p">]),</span> <span class="o">&amp;</span><span class="n">BytesWritten</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">FTWrite_Check</span> <span class="o">!=</span> <span class="n">FT_OK</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"Bad write!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="n">print_or_not</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"%C"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">char_tx_count</span><span class="p">]);</span>
		<span class="p">}</span>
		<span class="n">char_tx_count</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">char_tx_count</span> <span class="o">==</span> <span class="n">tx_data_size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>11: Actually writes the data to the FTDI device.</li>
</ul>

<p>You can call this function from your code like so,</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="kt">char</span> <span class="n">data</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"ALABTU!"</span>

<span class="n">tx</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="nb">true</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This will cause the FTDI to write ‚ÄúALABTU!‚Äù  It will also be displayed on the screen.</p>
:ET