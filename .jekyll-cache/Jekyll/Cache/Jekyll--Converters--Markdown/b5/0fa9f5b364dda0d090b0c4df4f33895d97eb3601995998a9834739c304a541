I"å3<p>We‚Äôve worked a bit with Comma Separated Values (<code class="highlighter-rouge">.csv</code>) files, but it they aren‚Äôt the only way to store data. There are a lot of data storage formats, each with its strengths and weaknesses.  One of the deficits of the <code class="highlighter-rouge">CSV</code> format is it cannot store formatting or graphs. This is the reason Excel format (<code class="highlighter-rouge">.xls</code> or <code class="highlighter-rouge">.xlsx</code>) has become another industry standard.</p>

<p>Excel is a program created by Microsoft to allow people to easily work with spreadsheets.  With it, they created a way of storing data which allows for formatting and other information to be included.  In fact, Excel documents have become so sophisticated programmers can include entire programs within the document.  This is the reason you‚Äôll often get the ‚ÄúEnable Content‚Äù button when open Excel document.  That means there is some code embedded in the Excel document which will run if you say ‚ÄúEnable‚Äù.  (Be careful, malicious programmers can insert code which could royally blink up your computer.)</p>

<p>When working with HMIS data being able to load and write Excel documents is necessary.  Unfortunately, it adds a lot of complexity.</p>

<p>There are several R libraries which will allow us to work with Excel documents in R.  They have different strengths, therefore, I‚Äôll focus on two libraries, rather than one.</p>

<ul>
  <li><a href="https://cran.r-project.org/web/packages/XLConnect/index.html">XLConnect</a></li>
  <li><a href="https://cran.r-project.org/web/packages/openxlsx/openxlsx.pdf">openxlsx</a></li>
</ul>

<h2 id="installing-r-libraries-for-excel">Installing R Libraries for Excel</h2>
<p>Installing either of these libraries should be as simple as running the following code:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"XLConnect"</span><span class="p">,</span><span class="w"> </span><span class="n">dependencies</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">install.packages</span><span class="p">(</span><span class="s2">"openxlsx"</span><span class="p">)</span></code></pre></figure>

<p>However, there are lots of <em>ifs</em>.  Both of these libraries rely on the <code class="highlighter-rouge">rJava</code> library.  Unfortunately, there is often some mismatch of computer architecture.  What does that mean?  Well, often you‚Äôll install R for amd64, but rJava is easiest to get working with R for i386.</p>

<p>Just know, RStudio has a way to set the version of R you are using by going to <code class="highlighter-rouge">Tools</code> then go to <code class="highlighter-rouge">Global Options</code>.  If you are in Windows, at the top of the <code class="highlighter-rouge">R General</code> section you will see the option to change your R version.  If you are having difficulty getting the above Excel documents working, try switching the R version to i386.  (Don‚Äôt forget to restart RStudio after switching.)</p>

<p>Past this, I‚Äôd be more than happy to help you troubleshoot.  Just leave a comment below or shoot me an email.  However, it can get pretty hairy‚Äìespecially on a Mac.</p>

<h2 id="working-with-xlconnect">Working with XLConnect</h2>
<p>Now days, I only use XLConnect to load data from Excel sheets.  I‚Äôve just been too lazy to re-write all my code to use one library (which would be <code class="highlighter-rouge">openxlsx</code>).  It‚Äôs my opinion the reason to use XLConnect is it‚Äôs a little easier to understand how it loads data.  Its weakness is it doesn‚Äôt have as much flexibility in formatting Excel documents to be saved on your computer.  And it can be confusing to save Excel sheets.</p>

<h3 id="loading-data-from-xlsx-documents">Loading Data from Xlsx Documents</h3>
<p>Loading data using XLConnect is a little different than using the <code class="highlighter-rouge">read.csv</code> function.  Like I stated earlier, Xlsx documents contain other information besides data.  One critical piece of information is the sheet number.</p>

<p>Unlike <code class="highlighter-rouge">CSVs</code> a single Excel document can contain multiple spreadsheets.  Each of these sheets will be broken out in tabs when you open an Excel document</p>

<p><img src="../images/excel_sheets.png" alt="" /></p>

<p>XLConnect doesn‚Äôt make any assumptions, it wants you to tell it which sheet you‚Äôd like to load.</p>

<p>Here‚Äôs how to load an Excel document, the first sheet, in XLConnect:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">XLConnect</span><span class="p">)</span><span class="w">
</span><span class="n">excelDf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">readWorksheetFromFile</span><span class="p">(</span><span class="s2">"/Users/user/Data/VI-SPDAT v2.0.xlsx"</span><span class="p">,</span><span class="w"> </span><span class="n">sheet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">startRow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span></code></pre></figure>

<p>It is similar to the <code class="highlighter-rouge">read.csv()</code> function, but notice the file in the path refers to <code class="highlighter-rouge">VI-SPDAT v2.0.xlsx</code>? You want to make sure your file format is either <code class="highlighter-rouge">.xlsx</code> or <code class="highlighter-rouge">.xls</code> as the <code class="highlighter-rouge">readWorkSheetFromFile()</code> function only works with Excel documents.</p>

<p>Also, there are two other parameters.  The first, <code class="highlighter-rouge">sheet = 1</code> is telling XLConnect to read in only the first sheet.  Just know, you could set it to whatever sheet number you‚Äôd like.  And for reference, the sheets are 1, 2, 3, 5‚Ä¶etc., left to right when opened in Excel.  So, even if your sheets have different names XLConnect will still load the data respective to their numerical order.</p>

<p>The second parameter is <code class="highlighter-rouge">startRow = 1</code>.  This allows you to tell R where to start the dataframe.  For example, if you had a header in your Excel document which didn‚Äôt contain data.</p>

<p><img src="../images/excel_robot_budget.png" alt="" /></p>

<p>We could skip down to row three, where the column headers are, by telling XLConnect <code class="highlighter-rouge">startRow = 3</code>.</p>

<h3 id="writing-a-dataframe-to-excel-document">Writing a Dataframe to Excel Document</h3>
<p>Writing Excel documents are a little more complex‚Äìand one reason I‚Äôm not a huge fan of XLConnect.</p>

<p>Here‚Äôs how you‚Äôd write an Excel file:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1">######################### Data ###################################</span><span class="w">
</span><span class="c1">###################### DO NOT CHANGE #############################</span><span class="w">
</span><span class="n">peopleDf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">PersonalID</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"ZP1U3EPU2FKAWI6K5US5LDV50KRI1LN7"</span><span class="p">,</span><span class="w"> </span><span class="s2">"IA26X38HOTOIBHYIRV8CKR5RDS8KNGHV"</span><span class="p">,</span><span class="w"> </span><span class="s2">"LASDU89NRABVJWW779W4JGGAN90IQ5B2"</span><span class="p">),</span><span class="w"> 
                       </span><span class="n">FirstName</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"Timmy"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Fela"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Sarah"</span><span class="p">),</span><span class="w">
                       </span><span class="n">LastName</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"Tesa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Falla"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Kerrigan"</span><span class="p">),</span><span class="w">
                       </span><span class="n">DOB</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"2010-01-01"</span><span class="p">,</span><span class="w"> </span><span class="s2">"1999-1-1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"1992-04-01"</span><span class="p">))</span><span class="w">
</span><span class="c1">##################################################################</span><span class="w">
</span><span class="c1">##################################################################</span><span class="w">

</span><span class="c1"># Create a workbook to contain the worksheet(s).</span><span class="w">
</span><span class="n">peopleWorkbook</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">loadWorkbook</span><span class="p">(</span><span class="s2">"People.xlsx"</span><span class="p">,</span><span class="w">  </span><span class="n">create</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="c1"># Create and name the worksheet.</span><span class="w">
</span><span class="n">myPeopleWorksheet</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">createSheet</span><span class="p">(</span><span class="n">peopleWorkbook</span><span class="p">,</span><span class="w"> </span><span class="s2">"My People"</span><span class="p">)</span><span class="w">
</span><span class="c1"># Add the data to the worksheet, put it in the workbook, save it to the computer.</span><span class="w">
</span><span class="n">writeWorksheetToFile</span><span class="p">(</span><span class="s2">"People.xlsx"</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">peopleDf</span><span class="p">,</span><span class="w"> </span><span class="n">sheet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"My People"</span><span class="p">)</span></code></pre></figure>

<p>After running this code you should have a file called <code class="highlighter-rouge">People.xlsx</code> in your working directory (remember, <code class="highlighter-rouge">getwd()</code> will tell provide the working directory).  If you open this file, it should look something like this:</p>

<p><img src="../images/xlconnect_written_workbook.png" alt="" /></p>

<p>This looks a little complex, but it‚Äôs just because XLConnect makes it look complex.  Here‚Äôs what it is is doing:</p>

<ol>
  <li>A workbook is created, which is a place where worksheets can be stored.</li>
  <li>myPeopleWorksheet is created inside the workbook created above. The sheet is called ‚ÄúMy People‚Äù</li>
  <li>The worksheet has our peopleDf added to it, then it is saved as a file called ‚ÄúPeople.xlsx‚Äù in our working directory.</li>
</ol>

<p>Like I said, it‚Äôs a lot of unneeded complexity, in my opinion.</p>

<h2 id="why-use-excel-documents">Why use Excel Documents</h2>
<p>After the added complexity of reading and saving Excel documents you might wonder what the benefit is?  Great question.</p>

<p>As stated at the beginning, Excel documents can contain other information besides just data.  It contain formatting, images, graphs, and a lot of other stuff.  And one of the reasons for writing report scripts is to automate all redundant tasks.</p>

<p>Imagine, you‚Äôve got a data set of 12,000 participant enrollments. You want to create a spreadsheet which puts the enrollment in descending order.  And you want to create this report daily.</p>

<p>If you used the <code class="highlighter-rouge">write.csv()</code> you would need to open the CSV after creating it, then manually add the sort to the document, save it as an Excel file, then send it out.  I guarantee, after doing that for several weeks you are going to want to find a way to automate it.  Especially, if you decide the headers need to have font size 18 as well.</p>

<p>Excel documents allow us to store the formating tweaks and XLConnect allows us to insert them automatically.</p>

<p>Adding formatting can get a little more complex and will be the focus of another article.  Also, we will use <code class="highlighter-rouge">openxlsx</code> as it is <em>much</em> easier to output formatting, again, just my opinion.</p>

:ET