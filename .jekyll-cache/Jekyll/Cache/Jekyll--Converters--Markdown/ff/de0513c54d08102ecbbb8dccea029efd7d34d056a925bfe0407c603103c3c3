I"=<h1 id="creating-a-data-error-report-by-user">Creating a Data Error Report by User</h1>
<p>In this work challenge we will combine  Client and Enrollment data, then we will add a non-HMIS dataframe which contains user account information.  After these data are merged, we will then parse them for missing data elements and provide a by-user list of data errors.</p>

<h2 id="data-needed">Data Needed</h2>
<p>As stated above, the data needed are:</p>

<ol>
  <li><code class="highlighter-rouge">Client.csv</code></li>
  <li><code class="highlighter-rouge">Enrollment.csv</code></li>
  <li>A dataframe containg HMIS user contact info.</li>
</ol>

<p>The key to this challenge literally is at the end of every HMIS CSV.  Each exported CSV contains some <a href="https://en.wikipedia.org/wiki/Metadata">metadata</a> which describes how the data were produced.</p>

<p><img src="../images/csv-meta-data.png" alt="" /></p>

<p>The <code class="highlighter-rouge">DateCreated</code> should represent when the respective row was actually entered into the HMIS.  <code class="highlighter-rouge">DateUpdated</code> is the last time that row was modified and saved in the HMIS.  The <code class="highlighter-rouge">UserID</code> is the case-manager who last modified these data.  Lastly, the ExportID is the number which identifies a collection of HMIS CSVs to be in the same batch.</p>

<p>We are going to focus in on the <code class="highlighter-rouge">UserID</code> element.  Notice, you will not find the usernames, real names, email address, or really any contact information for individual HMIS users.  However, having a unique user ID in each CSV would still allow HUD to use <a href="https://en.wikipedia.org/wiki/Internal_validity">internal validity tests</a> to determine the reliability of the user.</p>

<p>For us, we are going to take another source of data containing all of the UserIDs <em>and</em> contact information for the users.  Now, this will probably be different each HMIS software vendor.  But each vendor should have a way to export a list of the users in the system with their <code class="highlighter-rouge">UserID</code>, which will allow us to join these data to the HMIS CSVs.</p>

<p>For those participating in the work challenge from my CoC, I’ll provide a CSV with these user data.</p>

<p>After actual user names are joined to the CSVs, then we will begin to parse the CSVs for data errors.  If you aren’t yet familiar with the term <a href="https://en.wikipedia.org/wiki/Parsing">parse</a> in computer science, think of it as diagraming a setence where we make the computer do all the work.  Instead of a sentence, we will be diagraming a row of data to determine if there are any errors.</p>

<h2 id="whats-an-hmis-data-error">What’s an HMIS Data Error?</h2>
<p>The HMIS Data Dictionary is specific about what a data error is.</p>

<ul>
  <li>8 – Client doesn’t know</li>
  <li>9 – Client refused</li>
  <li>99 – Data not collected</li>
  <li>Blank</li>
  <li>Incomplete response</li>
  <li>Non-determinable response</li>
</ul>

<p>Here’s an example of a Client.csv which contains one of each type of error.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">PersonalID</th>
      <th style="text-align: left">FirstName</th>
      <th style="text-align: left">LastName</th>
      <th style="text-align: left">DOB</th>
      <th style="text-align: left">SSN</th>
      <th style="text-align: left">DisablingCondition</th>
      <th style="text-align: left">VeteranStatus</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">ZP1U3EPU2FKAWI6K5US5LDV50KRI1LN7</td>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Tesa</td>
      <td style="text-align: left">2010-01-01</td>
      <td style="text-align: left">123-45-6789</td>
      <td style="text-align: left">1</td>
      <td style="text-align: left">8</td>
    </tr>
    <tr>
      <td style="text-align: left">IA26X38HOTOIBHYIRV8CKR5RDS8KNGHV</td>
      <td style="text-align: left">Fela</td>
      <td style="text-align: left">Falla</td>
      <td style="text-align: left">1999-1-1</td>
      <td style="text-align: left">4321</td>
      <td style="text-align: left">1</td>
      <td style="text-align: left">1</td>
    </tr>
    <tr>
      <td style="text-align: left">LASDU89NRABVJWW779W4JGGAN90IQ5B2</td>
      <td style="text-align: left">Sarah</td>
      <td style="text-align: left">Kerrigan</td>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Blahblah</td>
      <td style="text-align: left">99</td>
      <td style="text-align: left">0</td>
    </tr>
  </tbody>
</table>

<p>Here are the data errors:</p>

<ol>
  <li>Tesa is first name blank</li>
  <li>Sarah’s DOB is blank</li>
  <li>Fela’s SSN is an incomplete response (must be 9 digits)</li>
  <li>Sarah’s SSN is non-determinable</li>
  <li>Sarah’s DisablingCondition was not collected.</li>
  <li>Tesa refused to provide a VeteranStatus.</li>
</ol>

<h2 id="the-goal">The Goal</h2>
<p>We are going to take a HMIS data and join it with a dataframe containing end-user information.  Then, we will create a query to subset the dataframe so we get a dataframe which contains <em>only</em> rows with data errors.  Lastly, we will get counts of the types of data errors and the names end-users who’ve caused the most data errors.</p>

<p>The data elements we will look into for errors:</p>

<ol>
  <li>FirstName</li>
  <li>LastName</li>
  <li>DOB</li>
  <li>VeteranStatus</li>
  <li>DisablingCondition</li>
  <li>RelationshipToHoH</li>
</ol>

<p>To get this information we will need to do the following:</p>

<ol>
  <li>Load Client.csv, Enrollment.csv, and Users.xlsx</li>
  <li>Left join the clientDf and enrollmentDf.</li>
  <li>Left join the usersDf to the result of step 2.</li>
  <li>Parse the data elements listed above for data errors</li>
  <li>Create a dataframe which contains only rows with data errors</li>
  <li>Use the SQL Count function to count the number of data errors by the element list above.</li>
  <li>Use the SQL Count function to count how many times a end-users name is associated with a row containing errors.</li>
  <li>Create a dataframe of these counts</li>
  <li>Save the dataframe containing the error counts into an Excel file (.xlsx)</li>
</ol>

<h2 id="the-resources">The Resources</h2>
<p>Below are the resources which should help for each step:</p>

<p>TBD</p>
:ET