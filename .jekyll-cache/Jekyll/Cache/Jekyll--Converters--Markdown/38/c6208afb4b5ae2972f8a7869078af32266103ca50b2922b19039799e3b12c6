I"nl<p>We’re almost done.  In the previous articles we’ve used a local machine to train a CNN to detect toxic sentiment in text.  Also, we prepared a small (1GB RAM) server to use this pre-trained network to make predictions.  Now, let’s finish it and create a webservice where anyone can access our awesome magical algorithm.</p>

<h3 id="prediction-service">Prediction Service</h3>
<p>On your remote server, navigate to your <code class="highlighter-rouge">flask_app</code> folder and create a file called <code class="highlighter-rouge">nn_service.py</code>. The following code creates an HTTP request endpoint <code class="highlighter-rouge">/detect-toxic</code> and it exposes to other programs running on the server.  A bit more explanation after the code.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /home/my_user/flask_app
nano nn_service.py
</code></pre></div></div>
<p>Enter the following:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
<span class="n">application</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">load_model</span>
<span class="kn">from</span> <span class="nn">keras.preprocessing.sequence</span> <span class="kn">import</span> <span class="n">pad_sequences</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pymongo</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="c1"># Parameters
</span><span class="n">mongo_port</span> <span class="o">=</span> <span class="mi">27017</span>
<span class="n">embedding_collection</span> <span class="o">=</span> <span class="s">'word_embeddings'</span>
<span class="n">word_embedding_name</span> <span class="o">=</span> <span class="s">'glove-wiki-gigaword-50'</span>
<span class="n">pad_length</span> <span class="o">=</span> <span class="mi">100</span>

<span class="c1"># Globals
</span><span class="k">global</span> <span class="n">model</span><span class="p">,</span> <span class="n">graph</span>

<span class="c1"># Connection to Mongo DB
</span><span class="k">try</span><span class="p">:</span>
    <span class="n">mong</span> <span class="o">=</span> <span class="n">pymongo</span><span class="p">.</span><span class="n">MongoClient</span><span class="p">(</span><span class="s">'127.0.0.1'</span><span class="p">,</span> <span class="n">mongo_port</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Connected successfully.'</span><span class="p">)</span>
<span class="k">except</span> <span class="n">pymongo</span><span class="p">.</span><span class="n">errors</span><span class="p">.</span><span class="n">ConnectionFailure</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Could not connect to MongoDB: '</span> <span class="o">+</span> <span class="n">e</span><span class="p">)</span>

<span class="n">db</span> <span class="o">=</span> <span class="n">mong</span><span class="p">[</span><span class="n">embedding_collection</span><span class="p">]</span>
<span class="n">coll</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="n">word_embedding_name</span><span class="p">]</span>

<span class="c1"># Load Keras Model
</span><span class="n">model</span> <span class="o">=</span> <span class="n">load_model</span><span class="p">(</span><span class="s">'/home/my_user/flask_app/models/tox_com_det.h5'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="n">_make_predict_function</span><span class="p">()</span>

<span class="c1"># Start flask
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">application</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'127.0.0.1'</span><span class="p">)</span>

<span class="o">@</span><span class="n">application</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/detect-toxic'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">sequence_to_indexes</span><span class="p">():</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'nn_service.log'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">'here'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">sequence</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">json</span><span class="p">[</span><span class="s">'sequence'</span><span class="p">]</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">get_error</span><span class="p">(</span><span class="s">'missing parameters'</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'prediction'</span><span class="p">:</span> <span class="n">prediction_from_sequence</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">pad_length</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_word_index</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">index</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">index</span> <span class="o">=</span> <span class="n">coll</span><span class="p">.</span><span class="n">posts</span><span class="p">.</span><span class="n">find_one</span><span class="p">({</span><span class="s">'word'</span><span class="p">:</span> <span class="n">word</span><span class="p">})[</span><span class="s">'index'</span><span class="p">]</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">return</span> <span class="n">index</span>

<span class="k">def</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">'error'</span><span class="p">:</span> <span class="n">message</span><span class="p">})</span>

<span class="k">def</span> <span class="nf">prediction_from_sequence</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="n">pad_length</span><span class="p">):</span>
    <span class="n">sequence</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="n">sequence_indexes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">sequence</span><span class="p">.</span><span class="n">split</span><span class="p">():</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">get_word_index</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">strip</span><span class="p">()))</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="n">index</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sequence_indexes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
    <span class="n">sequence_indexes</span> <span class="o">=</span> <span class="n">pad_sequences</span><span class="p">([</span><span class="n">sequence_indexes</span><span class="p">],</span> <span class="n">maxlen</span><span class="o">=</span><span class="n">pad_length</span><span class="p">)</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">sequence_indexes</span><span class="p">)</span>
    <span class="n">prediction</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="n">verbose</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">prediction_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s">'toxic'</span><span class="p">,</span> <span class="s">'severe_toxic'</span><span class="p">,</span> <span class="s">'obscene'</span><span class="p">,</span> <span class="s">'threat'</span><span class="p">,</span> <span class="s">'insult'</span><span class="p">,</span> <span class="s">'identity_hate'</span><span class="p">]</span>
    <span class="n">prediction_results</span> <span class="o">=</span> <span class="nb">str</span><span class="p">({</span><span class="n">prediction_labels</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="n">prediction</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span>
                              <span class="n">prediction_labels</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">prediction</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span>
                              <span class="n">prediction_labels</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">prediction</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span>
                              <span class="n">prediction_labels</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">prediction</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">3</span><span class="p">],</span>
                              <span class="n">prediction_labels</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">prediction</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">],</span>
                              <span class="n">prediction_labels</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">prediction</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span>
                            <span class="p">})</span>
    <span class="k">return</span> <span class="n">prediction_results</span>
</code></pre></div></div>
<p>What’s going on?  Well, it’s an extension of code I’ve detailed in earlier parts of this series.  However, there are a couple of new pieces.</p>

<p>First, we are connecting to our MongoDB database containing the contextual word-embeddings.  This database is used to look up words, which have been sent to our service endpoint.</p>

<p>The only route in this server is a <code class="highlighter-rouge">POST</code> service.  It takes one argument: <code class="highlighter-rouge">sequence</code>.  The sequence is the text the webservice consumer would like to have analyzed for toxic content.  The endpoint calls the <code class="highlighter-rouge">prediction_from_sequence()</code>.  Inside the function, the word indexes are pulled from the <code class="highlighter-rouge">word_embeddings</code> database.  After, the newly converted sequence is padded to the needed <code class="highlighter-rouge">100</code> dimensions. Then, this sequence is passed to our CNN, which makes the prediction. Lastly, the prediction is converted to JSON and returned to the user.</p>

<p>Before we go much further, let’s test the script to make sure it actually works.  Still in the <code class="highlighter-rouge">flask_app</code> directory type, replacing <code class="highlighter-rouge">my_user</code> with your user name and <code class="highlighter-rouge">name_of_flask_app.py</code> with the name of your Flask app:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"# Flask variables"</span> &amp;&gt;&gt; /home/my_user/.bashrc
<span class="nb">echo</span> <span class="s2">"export FLASK_APP=name_of_flask_app.py"</span> &amp;&gt;&gt; /home/my_user/.bashrc
</code></pre></div></div>
<p>This sets <code class="highlighter-rouge">FLASK_APP</code> variable, which is used when executing the <code class="highlighter-rouge">Flask</code> webservice.</p>

<p>Ok, we should be able to test the app fully now:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flask run
</code></pre></div></div>
<p>You should be greeted with something similar to:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> * Serving Flask app "nn_service.py"
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
Using TensorFlow backend.
Connected successfully.
2019-02-03 15:53:26.391389: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2019-02-03 15:53:26.398145: I tensorflow/core/common_runtime/process_util.cc:69] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre></div></div>
<p>Great! We’re on the home stretch.</p>

<p>I’ve prepared a <code class="highlighter-rouge">curl</code> statement to test the server.  You will need to leave the Flask program running and open a second terminal to your server.  When the second terminal is up paste in the following, replacing the “sequence” with something nasty or nice.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X POST \
  http://localhost:5000/detect-toxic \
  -H 'Content-Type: application/json' \
  -d '{"sequence":"im pretty sure you are a super nice guy.","padding": 100}'
</code></pre></div></div>
<p>You <em>should</em> get back an appropriate response:
<img src="../images/toxic-comment-detector-local-test.png" alt="local-curl-test-neural-net-webservice" /></p>

<h3 id="nodejs-and-node-http-proxy">NodeJS and node-http-proxy</h3>
<p>It gets a bit weird here.  Usually, one will setup a Flask server with <code class="highlighter-rouge">uwsgi</code> or <code class="highlighter-rouge">gunicorn</code> combined with <code class="highlighter-rouge">nginx</code>.  However, I found the <code class="highlighter-rouge">uwsgi</code> middle-ware was creating two instances of my project, which would not fit in the microserver’s RAM.  I spent <em>a lot</em> of time creating a server the <code class="highlighter-rouge">proper</code> only to be disheartened when I discovered <code class="highlighter-rouge">uwsgi</code> was creating two instances of the <code class="highlighter-rouge">nn_service.py</code>, thereby attempting to load two of the CNNs into memory.  Our poor server.  I gave up on “proper” and went with what I describe below.  However, I’ve created a bash script to completely setup a server for you the “proper” way. I’ve added it to the Appendix.</p>

<p>I’ve opted to run Flask and serve it with a <code class="highlighter-rouge">nodejs</code> server as a proxy.<br />
<img src="../images/nn_service_stack.png" alt="neural-net-service-stack" /></p>

<p>The <code class="highlighter-rouge">nodejs</code> is atypical, but I found it probably the most simple to setup.  So, eh.</p>

<p>Let’s install NodeJS on the server.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo yum install -y nodejs
</code></pre></div></div>
<p>Now move to the directory containing your flask_app and initialize a node project.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /home/my_user/flask_app
npm init
</code></pre></div></div>
<p>You will be prompted to enter the project–take your time to fill it out or skip it by hitting return repeatedly.</p>

<p>Once the project has been setup, let’s install the <a href="https://github.com/nodejitsu/node-http-proxy">node-http-proxy</a> package.  It will allow us to create a proxy server sitting on top of our Flask service in a couple of lines of code.</p>

<p>Still in your project directory:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install node-http-proxy
nano server.js
</code></pre></div></div>
<p>Inside the server file place:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">),</span>
    <span class="nx">httpProxy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http-proxy</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">httpProxy</span><span class="p">.</span><span class="nx">createProxyServer</span><span class="p">({</span><span class="na">target</span><span class="p">:</span><span class="dl">'</span><span class="s1">http://localhost:5000</span><span class="dl">'</span><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8000</span><span class="p">);</span>
</code></pre></div></div>
<p>Alright, before testing our Flask webservice we need to allow <code class="highlighter-rouge">8000</code> port access and allow <code class="highlighter-rouge">HTTP / HTTPS</code> request on the firewall.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>firewall-cmd --permanent --zone=public --add-service=http
firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --zone=public --add-port=8000/tcp --permanent
sudo firewall-cmd --reload
</code></pre></div></div>
<p>You can test the whole proxy setup by opening two terminals to your server.  In one, navigate to your Flask app and run it:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /home/my_user/flask_app
flask run
</code></pre></div></div>
<p>In the other navigate to the <code class="highlighter-rouge">node</code> proxy file and run it:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /home/my_user/flask_app/proxy
node server.js
</code></pre></div></div>
<p>Now, you should be able to make a call against the server. <em>This time</em>, run the <code class="highlighter-rouge">curl</code> command from your local machine–replacing the <code class="highlighter-rouge">my_server_ip</code> with your server’s IP address:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X POST \
  http://my_server_ip:8000/detect-toxic \
  -H 'Content-Type: application/json' \
  -d '{"sequence":"im pretty sure you are a super nice guy.","padding": 100}'
</code></pre></div></div>
<p>You should get a response exactly like we saw from running the <code class="highlighter-rouge">curl</code> command locally.</p>

<h3 id="daemonize-it">Daemonize It</h3>
<p>The last bit of work to do is create two daemons.  One will keep the Flask app running in the background.  The other, will keep the proxy between the web and the Flask app going.</p>

<p>One caveat before starting, because daemons are loaded without the <code class="highlighter-rouge">PATH</code> variable all file references must use absolute paths.</p>

<p>At the server’s command prompt type:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano /etc/systemd/system/nn_service.service
</code></pre></div></div>
<p>And add the following replacing <code class="highlighter-rouge">my_user</code> with your user name:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=Flask instance to serve nn_service
After=network.target

[Service]
User=my_user
Group=my_user
WorkingDirectory=/home/my_user/flask_app
ExecStart=/usr/local/miniconda/bin/flask run

[Install]
WantedBy=multi-user.target
</code></pre></div></div>
<p>This will create a service.  It will run the program pointed to by <code class="highlighter-rouge">ExecStart</code>, in our case <code class="highlighter-rouge">flask run</code>, inside the directory pointed by <code class="highlighter-rouge">WorkingDirectory</code>.</p>

<p>Save and exit.</p>

<p>Now, let’s create the <code class="highlighter-rouge">nn_service_proxy.service</code> daemon:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano /etc/systemd/system/nn_service_proxy.service
</code></pre></div></div>
<p>And enter the following replacing <code class="highlighter-rouge">my_user</code> with your user name:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Description=Proxy to Flask instance to serve nn_service
After=network.target

[Service]
User=my_user
Group=my_user
WorkingDirectory=/home/my_user/flask_app/node
ExecStart=/usr/bin/node /home/my_user/flask_app/node/nn_service_proxy.js

[Install]
WantedBy=multi-user.target
</code></pre></div></div>
<p>Great! We’re ready to enable and start them.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl enable nn_service.service
sudo systemctl enable nn_service_proxy.service
sudo systemctl start nn_service.service
sudo systemctl start nn_service_proxy.service
</code></pre></div></div>
<p>Alright, you can now check the system journal to make sure they loaded correctly:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo journalctl -xe
</code></pre></div></div>
<p>But, it <em>should</em> be good.  If something goes wrong, definitely ask questions in the comments.  Otherwise, we should be ready to test our full functioning toxic text detection webservice!</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X POST \
  http://my_server_ip:8000/detect-toxic \
  -H 'Content-Type: application/json' \
  -d '{"sequence":"im pretty sure you are a super nice guy.","padding": 100}'
</code></pre></div></div>
<p>Wow! What a journey right.  But pretty damn cool.  We now have a webservice which can be called by anyone who wants to check text to see if it contains toxic sentiment.  I didn’t have an application when starting this project, but I’m learning webscraping with a friend, and I think it’ll be great to pass text off to this webservice and have it flagged if contains nasty content.</p>

<h3 id="proper-flask-webservice-setup">“Proper” Flask Webservice Setup</h3>
<p>I’ve written a script to setup the webservice for you.  First, you will need to be logged into your Centos 7 server as root.</p>

<p>Then type:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum install -y wget
wget http://ladvien.com/assets/centos_nn_webservice.sh
chmod +x centos_nn_webservice.sh
</code></pre></div></div>
<p>What this script does:</p>

<ol>
  <li>Sets up a new user</li>
  <li>Adds Miniconda to the PATH variable.</li>
  <li>Adds Flask environment variables (needed to run app).</li>
  <li>Updates the server.</li>
  <li>Creates the flask_app directories</li>
  <li>Opens the needed ports</li>
  <li>Installs <code class="highlighter-rouge">nginx</code></li>
  <li>Creates a <code class="highlighter-rouge">nginx</code> .conf file with information to proxy <code class="highlighter-rouge">uwsgi</code> service.</li>
  <li>Installs <code class="highlighter-rouge">uwsgi</code> creates a .ini file for wrapping the Flask app.</li>
  <li>Creates and enables a <code class="highlighter-rouge">uwsgi</code> daemon.</li>
  <li>Creates and enables a <code class="highlighter-rouge">Flask</code> daemon.</li>
  <li>Installs Miniconda, tensorflow, and sets Python to 3.6.8.</li>
  <li>Installs MongoDB</li>
  <li>Enables remote editing from VSCode (<a href="https://ladvien.com/visual-studio-code-raspberry-pi/">info</a>)</li>
</ol>

<p>We’re about to execute the script, <strong>but there’s a critical step I wanted to explain first.  The script is going to take several commandline arguments.  If these are wrong, it’ll royally jake up your server.</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./centos_nn_webservice.sh user_name user_password flask_app_name flask_port
</code></pre></div></div>

<ul>
  <li><strong>user_name</strong> This will be the user who provides the webservice</li>
  <li><strong>user_password</strong> The user’s password.  You’ll need this to <code class="highlighter-rouge">ssh</code> into the server as this  user.</li>
  <li><strong>flask_app_name</strong> This is the name of your app.  Everything from the Python script to the daemon will be labeled with this name.</li>
  <li><strong>flask_port</strong> This is the port which will be exposed to the web.</li>
</ul>

<p>Ok, replace all of the above commandline arguments with the ones you prefer and execute it.  Cross your fingers or yell at me in the comments.</p>
:ET