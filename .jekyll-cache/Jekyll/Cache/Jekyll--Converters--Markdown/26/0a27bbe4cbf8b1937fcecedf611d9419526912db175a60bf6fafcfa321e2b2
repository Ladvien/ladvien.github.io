I"9A<p>Originally posted on <a href="www.letsmakerobots.com">www.letsmakerobots.com</a></p>

<p><a class="btn" href="/files/Kobold_Working_1.zip" target="">Kobold Files</a></p>

<div class="flex-video">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/f5g_sLFr69g" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>Awhile back Sparkfun posted a new product, their <a href="https://www.sparkfun.com/products/11890">MiniMoto</a> breakout board.  It breaks out the <a href="http://www.ti.com/lit/ds/slvsab2f/slvsab2f.pdf">DRV8830</a> IC, which is a serially controlled (I2C) H-Bridge.  I thought the chip was nifty.  A few problems though,</p>

<ol>
  <li>Sparkfun’s breakout was 25x25mm for <em>one</em> bridge.  If I added another and then an Arduino Pro Mini it’d lose smallness.</li>
  <li>It’s $9.95</li>
  <li>It’s not on a purple board :)</li>
</ol>

<p>So, I set out to make a robot controller with it that was smaller than a Sparkfun breakout.  What I ended up with is a little bitch I refer to a Kobold.</p>

<p><img src="../images/IMG_0350.jpg" alt="" /></p>

<p>The board is pretty straightforward.  It has an ATtiny 85 that acts as an I2C Master using the <a href="http://todbot.com/blog/2010/09/25/softi2cmaster-add-i2c-to-any-arduino-pins/">SoftI2CMaster</a> library.  This allows the Tiny 85 to control two motors using only two pins, leaving three for your pleasure.</p>

<p>My end goal will be to build a shield for it and hook up a HM-10 to make it a little wireless tethered bot.  This would bring me down to one pin, which I’m sure will be some sort of range finder or feeling sensor.</p>

<p><img src="../images/Kobold_Board_Close.jpg" alt="" /></p>

<p>The BOM:</p>

<ol>
  <li><a href="http://www.mouser.com/Search/ProductDetail.aspx?R=ATTINY85-20SHvirtualkey55650000virtualkey556-ATTINY85-20SH">1 x ATtiny 85 SOIC</a> $1.21</li>
  <li><a href="http://www.mouser.com/ProductDetail/Texas-Instruments/DRV8830DGQ/?qs=sGAEpiMZZMuJc9I8Ed1ELBR0nLBayH7B">2 x DRV8830 MSOP-10</a> $5.10</li>
  <li><a href="http://www.mouser.com/Search/ProductDetail.aspx?R=SR731ELTER330Fvirtualkey66000000virtualkey660-SR731ELTPR330F">2 x .33 Ohm 0402</a> $.86</li>
  <li>1 x 1uF 0402</li>
  <li>2 x 4.7k Res. 0402</li>
  <li><a href="http://www.oshpark.com/shared_projectss/NCVym4Uc">1 x Kobold PCB</a> $2.50 (for three)</li>
</ol>

<p><strong>Total: $9.76</strong></p>

<p>The board can be programmed with an Arduino ISP:</p>

<p><img src="../images/Kobold_ISP_Pinout.jpg" alt="" /></p>

<p>Now, I just need to make a robot with it :)</p>

<p>I’m currently working on a second iteration to correct some problems.  I’ll also add a few features, like my pogo-pin programming interface.  The shield I have designed for it will also include a charging circuit and probably a SMD step-up circuit that should convert a LiPo to a nice 5v.</p>

<p>Anyway, work in progress…just thought I’d share.</p>

<p><strong>If anyone is interested in this board, please wait a few iterations. I get worried I’m making blue-smoke with someone else’s money.  :)</strong></p>

<p>Here is the code running in the video:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">//Sample Code for the Kobold Board.</span>
<span class="cp">#define NO_INTERRUPT 1
#define I2C_TIMEOUT 100
</span>
<span class="cp">#define SDA_PORT PORTB
#define SDA_PIN 4
#define SCL_PORT PORTB
#define SCL_PIN 3
#include &lt;SoftI2CMaster.h&gt;
#include &lt;avr/io.h&gt;
</span>
<span class="kt">void</span> <span class="nf">CPUSlowDown</span><span class="p">(</span><span class="kt">int</span> <span class="n">fac</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// slow down processor by a fac</span>
    <span class="n">CLKPR</span> <span class="o">=</span> <span class="n">_BV</span><span class="p">(</span><span class="n">CLKPCE</span><span class="p">);</span>
    <span class="n">CLKPR</span> <span class="o">=</span> <span class="n">_BV</span><span class="p">(</span><span class="n">CLKPS1</span><span class="p">)</span> <span class="o">|</span> <span class="n">_BV</span><span class="p">(</span><span class="n">CLKPS0</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">boolean</span> <span class="nf">writeSpeed</span><span class="p">(</span><span class="n">byte</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">speedx</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">//This should clear the fault register.</span>
  <span class="n">byte</span> <span class="n">regValue</span> <span class="o">=</span> <span class="mh">0x08</span><span class="p">;</span>
  <span class="c1">//Clear the fault status, in case there is one.</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_start</span><span class="p">(</span><span class="n">addr</span> <span class="o">|</span> <span class="n">I2C_WRITE</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_write</span><span class="p">(</span><span class="mh">0x01</span><span class="p">))</span> <span class="p">{</span>  <span class="c1">//0x01 = We want to write.</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_write</span><span class="p">(</span><span class="n">regValue</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//Write the clear bye for fault register.</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">i2c_stop</span><span class="p">();</span>  <span class="c1">//Stop transmission.</span>

  <span class="c1">//Let's convert the integer given us into a byte.</span>
  <span class="n">regValue</span> <span class="o">=</span> <span class="p">(</span><span class="n">byte</span><span class="p">)</span><span class="n">abs</span><span class="p">(</span><span class="n">speedx</span><span class="p">);</span>     <span class="c1">//Convert 0-63 to byte value to set speed.</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">regValue</span> <span class="o">&gt;</span> <span class="mi">63</span><span class="p">)</span> <span class="n">regValue</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span> <span class="c1">// Cap the value at 63.</span>
  <span class="n">regValue</span> <span class="o">=</span> <span class="n">regValue</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="p">;</span>           <span class="c1">// Left shift to make room for bits 1:0</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">speedx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">regValue</span> <span class="o">|=</span> <span class="mh">0x01</span><span class="p">;</span>  <span class="c1">// Set bits 1:0 based on sign of input.</span>
  <span class="k">else</span>           <span class="n">regValue</span> <span class="o">|=</span> <span class="mh">0x02</span><span class="p">;</span>   <span class="c1">//A negative number for reverse and positive for forward.</span>

  <span class="c1">//Now, let's move this sucker.</span>
  <span class="c1">//Sets the i2c slave address</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_start</span><span class="p">(</span><span class="n">addr</span> <span class="o">|</span> <span class="n">I2C_WRITE</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//0x00 = We want to write something.</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_write</span><span class="p">(</span><span class="mh">0x00</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">//Writes the byte which had been converted from an integer that was passed this function.  Annnnd! The motor moves!</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_write</span><span class="p">(</span><span class="n">regValue</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">i2c_stop</span><span class="p">();</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">boolean</span> <span class="nf">writeStop</span><span class="p">(</span><span class="n">byte</span> <span class="n">addr</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_start</span><span class="p">(</span><span class="n">addr</span> <span class="o">|</span> <span class="n">I2C_WRITE</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_write</span><span class="p">(</span><span class="mh">0x00</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">i2c_write</span><span class="p">(</span><span class="mh">0x00</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">i2c_stop</span><span class="p">();</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//------------------------------------------------------------------------------</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#if I2C_CPUFREQ == (F_CPU/8)
</span>  <span class="n">CPUSlowDown</span><span class="p">();</span>
<span class="cp">#endif
</span><span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">)</span> <span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>  
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">));</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>  
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">)</span> <span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>  
  <span class="p">}</span>
   <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
       <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">,</span> <span class="mi">14</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">,</span> <span class="mi">34</span><span class="p">));</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">)</span> <span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>  
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">,</span> <span class="o">-</span><span class="mi">14</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeSpeed</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">,</span> <span class="o">-</span><span class="mi">34</span><span class="p">));</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>  
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">)</span> <span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writeStop</span><span class="p">(</span><span class="mh">0xCE</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>  
   <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

:ET