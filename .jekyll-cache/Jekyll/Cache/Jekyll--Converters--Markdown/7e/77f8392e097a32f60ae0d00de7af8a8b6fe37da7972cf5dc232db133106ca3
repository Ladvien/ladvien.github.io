I"sV<p><a href="https://ladvien.com/raw_images/1b1_frame.jpg"><img src="../images/1b1_frame.jpg" alt="" class="float-left" /></a> Not too long ago there was a post on Hackaday about a little four-wheeled bot made with a Raspberry Pi and some eBay motor drivers.</p>

<p><a href="https://hackaday.com/2018/01/24/raspberry-pi-zero-drives-tiny-rc-truck/">Raspberry Pi Zero Drives Tiny RC Truck</a></p>

<p>I really liked the little chassis, ordered one, and was happy to find it was delivered with the motors already mounted.  (As I become an aged hacker, it’s the little time savers which are genuinely appreciated.)</p>

<p>On buying the chassis I’d already decided to use one of my Raspberry Pi Zero W’s (rp0w) to control the bot.  I really like Arch Linux on the rp0w.  It’s light weight and the packages are well curated.  Again, it’s the little time savers.  I liked the combination even more since I found a way to set the rp0w headlessly, which meant I could go from SD card to SSH’ing into little Linux board.</p>

<ul>
  <li><a href="https://ladvien.com/installing-arch-linux-raspberry-pi-zero-w/">Headless Arch Linux on Raspberry Pi Zero W</a></li>
</ul>

<p>Coincidentally, I purchased several DRV8830 modules from eBay.  This is a sad story – I’ve played with the DRV8830 chip a long time ago:</p>

<ul>
  <li><a href="https://ladvien.com/kobold/">Kobold</a></li>
</ul>

<p>Because Sparkfun did a great job of documenting the IC and creating an Arduino library to go with it.  I was disheartened to find Sparkfun and EOL’ed the boards.</p>

<ul>
  <li><a href="https://www.sparkfun.com/products/retired/11890">MiniMoto Boards</a></li>
</ul>

<p>Probably because buttholes like me kept buying them off eBay.  I’ve got some mixed feelings here – one of them is guilt.</p>

<p><a href="../images/1b1_holes_line_up.jpg"><img src="../images/1b1_holes_line_up.jpg" alt="" class="float-right" /></a>
Anyway, I was surprised to find the mounting holes on the DRV8830s matched a set on the chassis. I decided to attempt using one module to drive two motors, thereby only needing two DRV8830 modules to drive the entire bot.</p>

<p>I’ve had some thermal paste lying about for years–it works nicely as an adhesive.  Also, I was hoping to use the chassis to heatsink the motor drivers.</p>
<div style="clear: both;"></div>

<p><a href="https://ladvien.com/raw_images/1b1_thermal_paste.jpg"><img src="../images/1b1_thermal_paste.jpg" alt="" class="thumbnail" /></a>
<a href="https://ladvien.com/raw_images/1b1_board_latched_down.jpg"><img src="../images/1b1_board_latched_down.jpg" alt="" class="thumbnail" /></a>
<a href="https://ladvien.com/raw_images/1b1_screw_it_down.jpg"><img src="../images/1b1_screw_it_down.jpg" alt="" class="thumbnail" /></a>
<a href="https://ladvien.com/raw_images/1b1_boards_latched_down2.jpg"><img src="../images/1b1_boards_latched_down2.jpg" alt="" class="thumbnail" /></a></p>

<div style="clear: both;"></div>

<p>A bit of a tangent.  At work one of the skills which is useful for our team is being able to work with APIs.  For awhile I’ve wanted to learn NodeJS, since it seems to be the goto framework for solid back-end business applications.  It doesn’t hurt StackOverflow’s Developer Survey for the last few years has shown JavaScript is a solid language to stay sharp on.  Specifically, being able to work within the NodeJS framework makes one pretty darn marketable.</p>

<ul>
  <li><a href="https://insights.stackoverflow.com/survey/2018">StackOverflow’s 2018 Develop Survey</a></li>
</ul>

<p>Ok, for these reasons I decided to build this bot using NodeJS.  I’ve written a separate article on setting up NodeJS, working with i2c-bus, and porting the DRV8830 Sparkfun library to NodeJS.</p>

<ul>
  <li>Not yet written (shesh, been busy.  Judge much? :P)</li>
</ul>

<p><a href="https://ladvien.com/raw_images/1b1_test_drv8830.jpg"><img src="../images/1b1_test_drv8830.jpg" alt="" class="float-left" /></a>
It didn’t take time at all to get the little motor spinning using NodeJS largely due to Michael Hord’s (Sparkfun) MiniMoto library. (Again, some guilt here.)</p>

<ul>
  <li><a href="https://github.com/Ladvien/drv8830">NodeJS DRV8830 Library</a></li>
</ul>

<p>I drove the motor shown using two series Li-Ion batteries connecting to a buck converter set to output ~5.0v.  The motor spun nicely and pulled around 200mA.  However, the real test would be connecting to <em>two</em> geared motors per DRV8830.</p>

<div style="clear: both;"></div>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">i2c</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">i2c-bus</span><span class="dl">'</span><span class="p">),</span> <span class="nx">i2c1</span> <span class="o">=</span> <span class="nx">i2c</span><span class="p">.</span><span class="nx">openSync</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">sleep</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">sleep</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">drv8830</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./drv8830</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">motorAddressOne</span> <span class="o">=</span> <span class="mh">0x61</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">motorAddressTwo</span> <span class="o">=</span> <span class="mh">0x67</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">motor1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">drv8830</span><span class="p">(</span><span class="nx">motorAddressOne</span><span class="p">,</span> <span class="nx">i2c1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">motor2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">drv8830</span><span class="p">(</span><span class="nx">motorAddressTwo</span><span class="p">,</span> <span class="nx">i2c1</span><span class="p">);</span>

<span class="nx">motor1</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
<span class="nx">motor2</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
<span class="nx">sleep</span><span class="p">.</span><span class="nx">msleep</span><span class="p">(</span><span class="mi">3500</span><span class="p">);</span>
<span class="nx">motor1</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="p">);</span>
<span class="nx">motor2</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
<span class="nx">motor1</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
<span class="nx">motor2</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span></code></pre></figure>

<p><a href="https://ladvien.com/raw_images/1b1_wiring_the_motors.jpg"><img src="../images/1b1_wiring_the_motors.jpg" alt="" class="float-right" /></a></p>

<p>It was time to wire up the chassis motors and create a test of the system.  The wire used was some eBay single core aluminum wire (the cheap stuff).  Wiring was pretty straightforward.</p>

<p>However, I did make a little i2c bus board from perfboard and JST connectors.  Adding both ceramic and electrolytic decoupling capacitors for smoothing and to aid peak discharge.</p>

<p>Note the heaping amount of heatsink goop on the underside of the perfboard, this was a hacker’s solution to galvanically isolating the perfboard from the steel chassis.</p>

<div style="clear: both;"></div>

<p><a href="https://ladvien.com/raw_images/1b1_making_a_interface.jpg"><img src="../images/1b1_making_a_interface.jpg" alt="" class="thumbnail" /></a>
<a href="https://ladvien.com/raw_images/1b1_wiring_motors_2.jpg"><img src="../images/1b1_wiring_motors_2.jpg" alt="" class="thumbnail" /></a>
<a href="https://ladvien.com/raw_images/1b1_adding_power.jpg"><img src="../images/1b1_adding_power.jpg" alt="" class="thumbnail" /></a></p>
<div style="clear: both;"></div>

<h3 id="one-b-one-schematic">One-B-One Schematic</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+--------------+                    +------------------+           +------------------+
|              |                    |                  |           |                  |
|              +--+LEAD1+----+OUT1+-+                  |VCC----+5V-+                  |
|              |                    |                  |           |                  |
| Motor 1      +--+LEAD2+----+OUT2+-+   DRV8830+A      +----GND----+  Buck Regulator  |
|              |                    |                  |           |                  |
|              |                    |                  |           |                  |
|              |                    |                  |           |                  |
+--------------+                    +-----+---+--------+           +--+--+------------+
                                          |   |                       |  |
                                      SDA1|   | SCL1               5V |  | GND
                                          |   |                       |  |
                                          |   |                       |  |
                                          |   |                       |  |
                                          |   |                       |  |
                                     +----+---+--------+              |  |
                                     |                 |              |  |
                                     |                 |              |  |
                        +----+VCC2+--+  ADUM1250ARZ    ++VCC1+--------+  |
                        |            |                 |                 |
                        |   ++GND2+--+                 ++GND1+-----------+
                        |   |        |                 |
                        |   |        +----+--+---------+
                        |   |             |  |
                        |   |         SDA1|  | SCL2
                        |   |             |  |
                        |   |             |  |
                        |   |             |  |
                  +-----+---+-------------+--+-------+

                            Raspberry Pi Zero W
</code></pre></div></div>

<p><a href="https://ladvien.com/raw_images/1b1_power_and_isolated.jpg"><img src="../images/1b1_power_and_isolated.jpg" alt="" class="float-left" /></a>
The ADUM1250ARZ is a bi-directional galvanic isolator for digital communication up to 1mbs.  It’s the first chip I ever designed a PCB for and it’s still my favorite.  Essentially, the ADUM1250 seperates the rp0w from the noisy motors – and more importantly, if I screw something up on the motor side, won’t kill my rp0w. <em>The ADUM1250 is not necessary for most people, just me</em></p>

<ul>
  <li><a href="https://www.mouser.com/_/?Keyword=ADUM1250ARZ&amp;FS=True">ADUM1250 (Mouser)</a></li>
  <li><a href="https://github.com/Ladvien/Ladviens-Eagle-Files/tree/master/ADUM1250ARZ%202-sided">Eagle Breakout PCB</a></li>
  <li><a href="http://www.analog.com/media/en/technical-documentation/data-sheets/ADUM1250_1251.pdf">Datasheet</a></li>
  <li><a href="https://ladvien.com/arduino-to-rpi-optoisolated-i2c/"><em>Very</em> Old Work with the IC</a></li>
</ul>

<div style="clear: both;"></div>
<p><a href="../images/1b1_no_strings.jpg"><img src="../images/1b1_no_strings.jpg" alt="" class="float-right" /></a>
The last bit I had to figure out was the the Raspberry Pi’s power.  I attempted to use a single Li-Ion battery and a boost regulator to power it, but the regulator’s I bought were DOA.</p>

<p>Then I remembered the load-sharing and boost converter circuit salvaged from a battery bank.  The charge circuit was built for Li-Po chemistry and the only Li-Po I had lying about was a 350mA.  I wired it up and was surprised the whole thing worked, with the added benefit of being able to charge the rp0w battery without disconnecting it.  <em>Booyah!</em></p>

<p>The last bit I did for the video.  I pulled the <code class="highlighter-rouge">npm</code> package keypress and wrote this little program.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">i2c</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">i2c-bus</span><span class="dl">'</span><span class="p">),</span> <span class="nx">i2c1</span> <span class="o">=</span> <span class="nx">i2c</span><span class="p">.</span><span class="nx">openSync</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">sleep</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">sleep</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">drv8830</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./drv8830</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">keypress</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">motorAddressOne</span> <span class="o">=</span> <span class="mh">0x61</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">motorAddressTwo</span> <span class="o">=</span> <span class="mh">0x67</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">motor1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">drv8830</span><span class="p">(</span><span class="nx">motorAddressOne</span><span class="p">,</span> <span class="nx">i2c1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">motor2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">drv8830</span><span class="p">(</span><span class="nx">motorAddressTwo</span><span class="p">,</span> <span class="nx">i2c1</span><span class="p">);</span>

<span class="c1">// var speed = 63;
</span>
<span class="kd">var</span> <span class="nx">turnSpeed</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">driverSideSpeed</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">passangerSideSpeed</span> <span class="o">=</span> <span class="mi">63</span><span class="p">;</span> 

<span class="c1">// make `process.stdin` begin emitting "keypress" events 
</span>
<span class="nx">keypress</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">);</span>
 
<span class="c1">// listen for the "keypress" event 
</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>  
  <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="o">&amp;&amp;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">ctrl</span> <span class="o">&amp;&amp;</span> <span class="nx">key</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">switch</span><span class="p">(</span><span class="nx">key</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="k">case</span> <span class="dl">'</span><span class="s1">w</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">motor1</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="nx">driverSideSpeed</span><span class="p">);</span>
        <span class="nx">motor2</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="nx">passangerSideSpeed</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">s</span><span class="dl">'</span><span class="p">:</span>
        <span class="kd">var</span> <span class="nx">motors</span> <span class="o">=</span> <span class="p">[</span><span class="nx">motor1</span><span class="p">,</span> <span class="nx">motor2</span><span class="p">];</span>
        <span class="nx">setDriveWithAcceleration</span><span class="p">(</span><span class="nx">motors</span><span class="p">,</span> <span class="nx">driverSideSpeed</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">motor1</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="nx">turnSpeed</span><span class="p">);</span>
        <span class="nx">motor2</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="nx">turnSpeed</span><span class="o">*-</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">motor1</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="nx">turnSpeed</span><span class="o">*-</span><span class="mi">1</span><span class="p">);</span>
        <span class="nx">motor2</span><span class="p">.</span><span class="nx">drive</span><span class="p">(</span><span class="nx">turnSpeed</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
        <span class="nx">motor1</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
        <span class="nx">motor2</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
  <span class="p">}</span>

<span class="p">});</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">setRawMode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">setDriveWithAcceleration</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">motors</span><span class="p">,</span> <span class="nx">desiredSpeed</span><span class="p">,</span> <span class="nx">accelTimeMilliSec</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">desiredSpeed</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>    
        <span class="nx">motors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">drive</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
        <span class="nx">motors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">drive</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
        <span class="nx">sleep</span><span class="p">.</span><span class="nx">msleep</span><span class="p">(</span><span class="nx">accelTimeMilliSec</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Then, I shot the following video and called it donesies.</p>

<div style="clear: both;"></div>
<div class="flex-video">
<iframe src="https://www.youtube.com/embed/PmRkM8vABuI" frameborder="0" allowfullscreen=""></iframe></div>
:ET