I"yë<p><a href="https://ladvien.com/lego_classifier/lego_classifier.png"><img src="../images/lego_classifier/lego_classifier.png" alt="" class="float-right" /></a> I‚Äôve a robot friend.  To be clear, the friend is not a robot, rather, we build robots together.  One of the projects we tossed about is building a LEGO sorting machine.  Ezra‚Äìagain, not a robot‚Äìteaches robotics to kids.  For their designs, LEGOs are the primary component.  Unfortunately, this results in much time spent to preparing for an event.</p>

<p>He mentioned to me, ‚ÄúWhat we really need is a sorting machine.‚Äù  I remained skpetical for some time, but finally, I warmed up to the idea when he started talking about incorporating a deep neural-netowrk.  More specifically, a convultional neural-network (CNN).</p>

<p>Anyway, these blog posts are our journal in build the LEGO sorter.</p>

<p>One last note to the reader: I won‚Äôt spend much time on explaining parts of the work where it is better documented elsehwere.  For example, Convolutional Neural Networks are well documented by, um, everyone?</p>

<p>Instead, I‚Äôm going to focus on stuff which I‚Äôve found everyone else omitting.  Like, deploying the neural-network to do some work. This one bugged me, because everyone loves to say, ‚ÄúDude, my classifier has a validation accuracy of 99.999%!‚Äù  That‚Äôs great, but as I found out, validation accuracy doesn‚Äôt always translate well into <em>production accuracy.</em></p>

<h2 id="the-idea">The Idea</h2>
<p>It was pretty straightfoward to begin with.  We‚Äôd find some images of LEGOs on the internet and then train a CNN to classify LEGOs by there part code.  It was a bit naive, but if knew the full amount of work a project like this would ahead of time I doubt anyone would do it.</p>

<p>Anyway, we began with searching the webs.  Google told us about several other folks doing something similiar.  I‚Äôm not going to list them all, only what I considered the best:</p>

<ul>
  <li><a href="https://medium.com/@pacogarcia3/tensorflow-on-raspbery-pi-lego-sorter-ab60019dcf32">Lego Sorter using TensorFlow on Raspberry Pi</a></li>
</ul>

<p>This is an <em>extremely</em> well documented project by <a href="https://medium.com/@pacogarcia3">Paco Garcia</a>.</p>

<p>So, after reading a few articles, we figured we could do this.  We just need the data.  After a bit of searching we found these existing datasets:</p>

<ul>
  <li><a href="https://www.kaggle.com/joosthazelzet/lego-brick-images">Kaggle: Database of Lego ‚ÄúImages‚Äù (they are rendered from models)</a></li>
  <li><a href="https://www.kaggle.com/pacogarciam3/lego-vs-generic-brick-image-recognition#example_Lego_1x4_crop0.jpg">Kaggle: Lego vs Generic Brick</a></li>
</ul>

<p>I wasn‚Äôt happy about these datasets.  Their structures weren‚Äôt great and they were not designed to help train a classifier.  But then, Ezra found Paco had actually opened his dataset to the public:</p>

<ul>
  <li><a href="https://www.kaggle.com/pacogarciam3/lego-brick-sorting-image-recognition?fbclid=IwAR303nIR4revbYVmW7YfC_4Frnqu3yn5gOi_HP7elJ4h1_a7uXDE1MVtacw">Kaggle: Lego Brick Sorting (best)</a></li>
</ul>

<p>One bit more, Paco also made the code used public:</p>

<ul>
  <li><a href="https://github.com/pacogarcia3/lego-11class-tensorflow">11 Class Tensorflow Model</a></li>
</ul>

<p>Paco, you a robot friend, too!</p>

<p>Alright, we were encouraged by Paco.  We knew the project would be possible.  However, we didn‚Äôt want to step on <a href="https://en.wikipedia.org/wiki/Brownfield_(software_development)">brownfield</a>.  We needed the green. Or if you don‚Äôt speak dev, we didn‚Äôt want to do this the easy way and replicate Paco‚Äôs work.  We wanted to really beat ourselves up by doing everything from scratch.</p>

<h2 id="creating-a-dataset">Creating a Dataset</h2>
<p>As I stated before, I didn‚Äôt like any datasets but Paco‚Äôs.  It was real images and meant to train a classifier.  But, they weren‚Äôt the LEGOs we wanted to classify.  Ezra‚Äôs LEGO projects involve a lot of technic bricks, which didn‚Äôt seem to be in Paco‚Äôs mix.  So, we set out to create our own (yanno, the hard way).</p>

<p>The first attempt creating training images was by rendering images from <code class="highlighter-rouge">.stl</code> files on the internet using the Python version of <a href="https://vtk.org/">Visualization Toolkit</a>.  I won‚Äôt cover it here since it was a fail and as I‚Äôll create an article later about the stuff we tried and didn‚Äôt work.</p>

<p>Anyway, while I was working on it Ezra had a brilliant plan.  He created an instrument to take pictures of a LEGO on a spin plate.  It used a Raspberry Pi, Pi Cam, and stepper motor, and unicorn farts.</p>

<p><img src="../images/lego_classifier/ezras_contraption.jpg" alt="lego-training-image-creator" /></p>

<p>IMAGE</p>

<h2 id="the-code">The Code</h2>

<p>Full code may be found here:</p>
<ul>
  <li><a href="https://github.com/Ladvien/lego_sorter/blob/master/lego_classifier_gpu.py">CNN LEGO Trainer (Python)</a></li>
</ul>

<h3 id="the-code-needed-libraries">The Code: Needed Libraries</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>


<span class="c1"># Import needed tools.
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">stats</span>

<span class="c1"># Import Keras
</span><span class="kn">import</span> <span class="nn">tensorflow.keras</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span><span class="p">,</span><span class="n">Flatten</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Lambda</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.layers</span> <span class="kn">import</span> <span class="n">SeparableConv2D</span><span class="p">,</span> <span class="n">BatchNormalization</span><span class="p">,</span> <span class="n">MaxPooling2D</span><span class="p">,</span> <span class="n">Conv2D</span><span class="p">,</span> <span class="n">Activation</span>
<span class="kn">from</span> <span class="nn">tensorflow.compat.v1.keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.callbacks</span> <span class="kn">import</span> <span class="n">ModelCheckpoint</span><span class="p">,</span> <span class="n">EarlyStopping</span><span class="p">,</span> <span class="n">TensorBoard</span><span class="p">,</span> <span class="n">CSVLogger</span><span class="p">,</span> <span class="n">ReduceLROnPlateau</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.preprocessing</span> <span class="kn">import</span> <span class="n">image</span>

<span class="c1"># Tensorboard
</span><span class="kn">from</span> <span class="nn">tensorboard</span> <span class="kn">import</span> <span class="n">program</span>
<span class="kn">import</span> <span class="nn">webbrowser</span>
<span class="kn">import</span> <span class="nn">time</span>
</code></pre></div></div>

<h3 id="the-code-parameters">The Code: Parameters</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">continue_training</span>       <span class="o">=</span> <span class="bp">False</span>
<span class="n">initial_epoch</span>           <span class="o">=</span> <span class="mi">0</span>
<span class="n">clear_logs</span>              <span class="o">=</span> <span class="bp">True</span>

<span class="n">input_shape</span>             <span class="o">=</span> <span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># This is the shape of the image width, length, colors
</span><span class="n">image_size</span>              <span class="o">=</span> <span class="p">(</span><span class="n">input_shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">input_shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># DOH! image_size is (height, width)
</span><span class="n">train_test_ratio</span>        <span class="o">=</span> <span class="mf">0.2</span>
<span class="n">zoom_range</span>              <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">shear_range</span>             <span class="o">=</span> <span class="mf">0.1</span>

<span class="c1"># Hyperparameters
</span><span class="n">batch_size</span>              <span class="o">=</span> <span class="mi">16</span>
<span class="n">epochs</span>                  <span class="o">=</span> <span class="mi">40</span>
<span class="n">steps_per_epoch</span>         <span class="o">=</span> <span class="mi">400</span>
<span class="n">validation_steps</span>        <span class="o">=</span> <span class="mi">100</span> 
<span class="n">optimizer</span>               <span class="o">=</span> <span class="s">'adadelta'</span> 
<span class="n">learning_rate</span>           <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">val_save_step_num</span>       <span class="o">=</span> <span class="mi">1</span>

<span class="n">path_to_graphs</span>          <span class="o">=</span> <span class="s">'./data/output/logs/'</span>
<span class="n">model_save_dir</span>          <span class="o">=</span> <span class="s">'./data/output/'</span>
<span class="n">train_dir</span>               <span class="o">=</span> <span class="s">'./lego_id_training_data/gray_train/'</span>
<span class="n">val_dir</span>                 <span class="o">=</span> <span class="s">'./lego_id_training_data/gray_test/'</span>
</code></pre></div></div>

<h3 id="the-code-helper-functions">The Code: Helper Functions</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">clear_logs</span><span class="p">:</span>
  <span class="err">!</span><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="n">data</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">logs</span><span class="o">/*</span>

<span class="k">def</span> <span class="nf">make_dir</span><span class="p">(</span><span class="n">dir_path</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dir_path</span><span class="p">):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">dir_path</span><span class="p">)</span>
    

<span class="k">def</span> <span class="nf">show_final_history</span><span class="p">(</span><span class="n">history</span><span class="p">):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'loss'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="o">.</span><span class="n">epoch</span><span class="p">,</span> <span class="n">history</span><span class="o">.</span><span class="n">history</span><span class="p">[</span><span class="s">'loss'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'Train loss'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="o">.</span><span class="n">epoch</span><span class="p">,</span> <span class="n">history</span><span class="o">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_loss'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'Validation loss'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'acc'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="o">.</span><span class="n">epoch</span><span class="p">,</span> <span class="n">history</span><span class="o">.</span><span class="n">history</span><span class="p">[</span><span class="s">'acc'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'Train acc'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="o">.</span><span class="n">epoch</span><span class="p">,</span> <span class="n">history</span><span class="o">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_acc'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'Validation acc'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="the-code-data-preparation">The Code: Data Preparation</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#################################
# Create needed dirs
#################################
</span><span class="n">make_dir</span><span class="p">(</span><span class="n">model_save_dir</span><span class="p">)</span>

<span class="c1">#################################
# Data generators
#################################
</span>
<span class="c1"># These Keras generators will pull files from disk
# and prepare them for training and validation.
</span><span class="n">augs_gen</span> <span class="o">=</span> <span class="n">ImageDataGenerator</span> <span class="p">(</span>
    <span class="n">shear_range</span> <span class="o">=</span> <span class="n">shear_range</span><span class="p">,</span>  
    <span class="n">zoom_range</span> <span class="o">=</span> <span class="n">shear_range</span><span class="p">,</span>        
    <span class="n">horizontal_flip</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">validation_split</span> <span class="o">=</span> <span class="n">train_test_ratio</span>
<span class="p">)</span>  

<span class="n">train_gen</span> <span class="o">=</span> <span class="n">augs_gen</span><span class="o">.</span><span class="n">flow_from_directory</span> <span class="p">(</span>
    <span class="n">train_dir</span><span class="p">,</span>
    <span class="n">target_size</span> <span class="o">=</span> <span class="n">image_size</span><span class="p">,</span> <span class="c1"># THIS IS HEIGHT, WIDTH
</span>    <span class="n">batch_size</span> <span class="o">=</span> <span class="n">batch_size</span><span class="p">,</span>
    <span class="n">class_mode</span> <span class="o">=</span> <span class="s">'sparse'</span><span class="p">,</span>
    <span class="n">shuffle</span> <span class="o">=</span> <span class="bp">True</span>
<span class="p">)</span>

<span class="n">test_gen</span> <span class="o">=</span> <span class="n">augs_gen</span><span class="o">.</span><span class="n">flow_from_directory</span> <span class="p">(</span>
    <span class="n">val_dir</span><span class="p">,</span>
    <span class="n">target_size</span> <span class="o">=</span> <span class="n">image_size</span><span class="p">,</span>
    <span class="n">batch_size</span> <span class="o">=</span> <span class="n">batch_size</span><span class="p">,</span>
    <span class="n">class_mode</span> <span class="o">=</span> <span class="s">'sparse'</span><span class="p">,</span>
    <span class="n">shuffle</span> <span class="o">=</span> <span class="bp">False</span>
<span class="p">)</span>

<span class="c1">#################################
# Save Class IDs
#################################
</span><span class="n">classes_json</span> <span class="o">=</span> <span class="n">train_gen</span><span class="o">.</span><span class="n">class_indices</span>
<span class="n">num_classes</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_gen</span><span class="o">.</span><span class="n">class_indices</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="the-code-building-the-model">The Code: Building the Model</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">test_model</span><span class="p">(</span><span class="n">opt</span><span class="p">,</span> <span class="n">input_shape</span><span class="p">):</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">Sequential</span><span class="p">()</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">input_shape</span> <span class="o">=</span> <span class="n">input_shape</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Flatten</span><span class="p">())</span>  <span class="c1"># this converts our 3D feature maps to 1D feature vectors
</span>    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s">'relu'</span><span class="p">))</span>
    
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>
    
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="n">num_classes</span><span class="p">,</span> <span class="n">activation</span> <span class="o">=</span> <span class="s">'softmax'</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">model</span>

<span class="c1">#################################
# Create model
#################################
</span>
<span class="k">def</span> <span class="nf">get_optimizer</span><span class="p">(</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.001</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">optimizer</span> <span class="o">==</span> <span class="s">'adam'</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tensorflow</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">optimizers</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">lr</span> <span class="o">=</span> <span class="n">learning_rate</span><span class="p">,</span> <span class="n">beta_1</span> <span class="o">=</span> <span class="mf">0.9</span><span class="p">,</span> <span class="n">beta_2</span> <span class="o">=</span> <span class="mf">0.999</span><span class="p">,</span> <span class="n">epsilon</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">decay</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">,</span> <span class="n">amsgrad</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">optimizer</span> <span class="o">==</span> <span class="s">'sgd'</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tensorflow</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">optimizers</span><span class="o">.</span><span class="n">SGD</span><span class="p">(</span><span class="n">lr</span> <span class="o">=</span> <span class="n">learning_rate</span><span class="p">,</span> <span class="n">momentum</span> <span class="o">=</span> <span class="mf">0.99</span><span class="p">)</span> 
    <span class="k">elif</span> <span class="n">optimizer</span> <span class="o">==</span> <span class="s">'adadelta'</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tensorflow</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">optimizers</span><span class="o">.</span><span class="n">Adadelta</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="n">learning_rate</span><span class="p">,</span> <span class="n">rho</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">decay</span><span class="o">=</span><span class="mf">0.0</span><span class="p">)</span>

<span class="n">selected_optimizer</span> <span class="o">=</span> <span class="n">get_optimizer</span><span class="p">(</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">learning_rate</span><span class="p">)</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">test_model</span><span class="p">(</span><span class="n">selected_optimizer</span><span class="p">,</span> <span class="n">input_shape</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">summary</span><span class="p">()</span>

<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="s">'sparse_categorical_crossentropy'</span><span class="p">,</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="n">selected_optimizer</span><span class="p">,</span>
    <span class="n">metrics</span> <span class="o">=</span> <span class="p">[</span><span class="s">'accuracy'</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="the-code-creating-callbacks">The Code: Creating Callbacks</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">best_model_weights</span> <span class="o">=</span> <span class="n">model_save_dir</span> <span class="o">+</span> <span class="s">'base.model'</span>

<span class="n">checkpoint</span> <span class="o">=</span> <span class="n">ModelCheckpoint</span><span class="p">(</span>
    <span class="n">best_model_weights</span><span class="p">,</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="s">'val_loss'</span><span class="p">,</span>
    <span class="n">verbose</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="n">save_best_only</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">mode</span> <span class="o">=</span> <span class="s">'min'</span><span class="p">,</span>
    <span class="n">save_weights_only</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">period</span> <span class="o">=</span> <span class="n">val_save_step_num</span>
<span class="p">)</span>

<span class="n">earlystop</span> <span class="o">=</span> <span class="n">EarlyStopping</span><span class="p">(</span>
    <span class="n">monitor</span><span class="o">=</span><span class="s">'val_loss'</span><span class="p">,</span>
    <span class="n">min_delta</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span>
    <span class="n">patience</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">mode</span><span class="o">=</span><span class="s">'auto'</span>
<span class="p">)</span>

<span class="n">tensorboard</span> <span class="o">=</span> <span class="n">TensorBoard</span><span class="p">(</span>
    <span class="n">log_dir</span> <span class="o">=</span> <span class="n">model_save_dir</span> <span class="o">+</span> <span class="s">'/logs'</span><span class="p">,</span>
    <span class="n">histogram_freq</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="n">batch_size</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span>
    <span class="n">write_graph</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">write_grads</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">write_images</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">csvlogger</span> <span class="o">=</span> <span class="n">CSVLogger</span><span class="p">(</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="n">model_save_dir</span> <span class="o">+</span> <span class="s">'training.csv'</span><span class="p">,</span>
    <span class="n">separator</span> <span class="o">=</span> <span class="s">','</span><span class="p">,</span>
    <span class="n">append</span> <span class="o">=</span> <span class="bp">False</span>
<span class="p">)</span>

<span class="nb">reduce</span> <span class="o">=</span> <span class="n">ReduceLROnPlateau</span><span class="p">(</span>
    <span class="n">monitor</span><span class="o">=</span><span class="s">'val_loss'</span><span class="p">,</span>
    <span class="n">factor</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
    <span class="n">patience</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> 
    <span class="n">mode</span><span class="o">=</span><span class="s">'auto'</span><span class="p">,</span>
    <span class="n">cooldown</span><span class="o">=</span><span class="mi">1</span> 
<span class="p">)</span>

<span class="n">callbacks</span> <span class="o">=</span> <span class="p">[</span><span class="n">checkpoint</span><span class="p">,</span> <span class="n">csvlogger</span><span class="p">,</span> <span class="n">tensorboard</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="the-code-training">The Code: Training</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">continue_training</span><span class="p">:</span>
    <span class="n">model</span><span class="o">.</span><span class="n">load_weights</span><span class="p">(</span><span class="n">best_model_weights</span><span class="p">)</span>
    <span class="n">model_score</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate_generator</span><span class="p">(</span><span class="n">test_gen</span><span class="p">,</span> <span class="n">steps</span> <span class="o">=</span> <span class="n">validation_steps</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'Model Test Loss:'</span><span class="p">,</span> <span class="n">model_score</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Model Test Accuracy:'</span><span class="p">,</span> <span class="n">model_score</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>


<span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit_generator</span><span class="p">(</span>
    <span class="n">train_gen</span><span class="p">,</span> 
    <span class="n">steps_per_epoch</span>  <span class="o">=</span> <span class="n">steps_per_epoch</span><span class="p">,</span> 
    <span class="n">validation_data</span>  <span class="o">=</span> <span class="n">test_gen</span><span class="p">,</span>
    <span class="n">validation_steps</span> <span class="o">=</span> <span class="n">validation_steps</span><span class="p">,</span>
    <span class="n">epochs</span> <span class="o">=</span> <span class="n">epochs</span><span class="p">,</span> 
    <span class="n">verbose</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="n">callbacks</span> <span class="o">=</span> <span class="n">callbacks</span>
<span class="p">)</span>
</code></pre></div></div>
:ET